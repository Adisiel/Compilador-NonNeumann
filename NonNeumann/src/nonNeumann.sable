Helpers 
all = [0 .. 0xFFFFF];
lower_case = ['a' .. 'z'];
upper_case = ['A' .. 'Z'];
letter = lower_case | upper_case;
digit = ['0'..'9'];
hex_digit = ['0'..'9']['a'..'f']['A'..'F'];
space = ' ';
underline = '_';
tabulation = 9;
new_line = 10;
carriage_return = 13;
left_brace = '{';
right_brace = '}';
end_of_line = new_line carriage_return | carriage_return | new_line;
not_cr_nl = [all -[carriage_return + new_line]];
not_trace = [all -'-'];
not_trace_brace = [not_trace -[left_brace + right_brace]];

Tokens
true = 'true';
false = 'false';
constant = 'const';
function = 'function';
int = 'int';
bool = 'bool';
real = 'real';
if = 'if';
else = 'else';
then = 'then';
tk_lambda = 'lambda';
and = 'and';
or = 'or';
entry = 'entry';
left_parentheses = '(';
right_parentheses = ')';
equal = '=';
plus =  '+';
minus = '-';
divide = '/';
product = '*';
module = '%';
exclamation = '!';
dot = '.';
comma = ',';
minor = '<';
bigger = '>';
left_bracket = '[';
right_bracket = ']';
colon = ':';
power = '^';
int_hexadecimal = '0''x'(hex_digit)+;
int_decimal = (digit)+;
float= (digit)+ '.' (digit)+;
cientific_notation = (digit)+'E''-'(digit)+ | (digit)+'E'(digit)+;
identifier = (letter | underline)+;
blank = (space | tabulation | end_of_line)+;
line_comment = ';' not_cr_nl* end_of_line;
block_comment = '{-' not_trace* '-'+ (not_trace_brace not_trace* '-'+)* '}';

Ignored Tokens
blank,
line_comment,
block_comment;

Productions 

	program = dec_function+;
	
	dec_function = entry? left_parentheses function type identifier function_param_auxiliar colon function_expression_auxiliar right_parentheses;
	
	function_param_auxiliar = left_parentheses parameters* right_parentheses;
	
	function_expression_auxiliar = left_parentheses expression right_parentheses;
	
	type = {int}int
		|{real}real
		|{bool}bool;
		
	parameters = parameter parameters_auxiliar*;
	
	parameters_auxiliar = comma parameter;
	
	parameter =  {dec}type identifier
		|{assign}assign;
		
	assign = type identifier left_parentheses parameter_assign right_parentheses;
	
	parameters_assign = parameter_assign parameters_assign_aux*;
	
	parameters_assign_aux = comma parameters_assign;
	
	parameter_assign = {type}type
		|{assign}assign;
		
	expression = {op}op
		|{gt} expression bigger op
		|{lt}expression minor op
		|{equal}expression equal op
		|{neg_bool} exclamation op
		|{or}expression or op
		|{and}expression and op
		|{if_statement} if_statement
		|{lambda} lambda;

	
	op = {factor}factor
		|{plus}op plus factor
  		|{minus}op minus factor;
			
	factor = {term} term
		|{mult} factor product term
		|{div} factor divide term
		|{neg} negation
		|{mod} factor module term;
		
	term = {literal} literal 
		|{expression} left_parentheses declaration_constant* expression right_parentheses
		|{call_function} call_function;
		
		
	negation = minus term;
	
	literal = {boolean}boolean_value
		|{float}numeral_float
		|{int}numeral_int;
		
	boolean_value = {true}true
		|{false}false;
	
	numeral_float = {float}float
		|{cientific_notation}cientific_notation;
		
	numeral_int = {int_decimal}int_decimal
		|{int_hexadecimal}int_hexadecimal;
	
	call_function = {call_function}identifier left_parentheses list_expressions? right_parentheses;
	
	list_expressions = {list_expressions}expression list_expressions_aux*;
		
	list_expressions_aux = {list_expressions_aux}comma expression;
	
	declaration_constant = {declaration_constant}left_parentheses constant type identifier expression right_parentheses;
		
	lambda = tk_lambda left_parentheses list_identifiers? right_parentheses colon term left_bracket lambda_list_expressions? right_bracket;
	
	lambda_list_expressions = expression lambda_list_expressions_auxiliar*;
	
	lambda_list_expressions_auxiliar = comma expression;
		
	list_identifiers = identifier list_identifiers_aux*;
	
	list_identifiers_aux = comma identifier;
	
	if_statement = if_statement_exp_aux then term if_statement_else_aux;
	
	if_statement_exp_aux = if term;
	
	if_statement_else_aux = else term;
	