/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ALambda extends PLambda
{
    private TTkLambda _tkLambda_;
    private TLeftParentheses _leftParentheses_;
    private PListIdentifiers _listIdentifiers_;
    private TRightParentheses _rightParentheses_;
    private TColon _colon_;
    private PTerm _term_;
    private TLeftBracket _leftBracket_;
    private PLambdaListExpressions _lambdaListExpressions_;
    private TRightBracket _rightBracket_;

    public ALambda()
    {
        // Constructor
    }

    public ALambda(
        @SuppressWarnings("hiding") TTkLambda _tkLambda_,
        @SuppressWarnings("hiding") TLeftParentheses _leftParentheses_,
        @SuppressWarnings("hiding") PListIdentifiers _listIdentifiers_,
        @SuppressWarnings("hiding") TRightParentheses _rightParentheses_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") TLeftBracket _leftBracket_,
        @SuppressWarnings("hiding") PLambdaListExpressions _lambdaListExpressions_,
        @SuppressWarnings("hiding") TRightBracket _rightBracket_)
    {
        // Constructor
        setTkLambda(_tkLambda_);

        setLeftParentheses(_leftParentheses_);

        setListIdentifiers(_listIdentifiers_);

        setRightParentheses(_rightParentheses_);

        setColon(_colon_);

        setTerm(_term_);

        setLeftBracket(_leftBracket_);

        setLambdaListExpressions(_lambdaListExpressions_);

        setRightBracket(_rightBracket_);

    }

    @Override
    public Object clone()
    {
        return new ALambda(
            cloneNode(this._tkLambda_),
            cloneNode(this._leftParentheses_),
            cloneNode(this._listIdentifiers_),
            cloneNode(this._rightParentheses_),
            cloneNode(this._colon_),
            cloneNode(this._term_),
            cloneNode(this._leftBracket_),
            cloneNode(this._lambdaListExpressions_),
            cloneNode(this._rightBracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALambda(this);
    }

    public TTkLambda getTkLambda()
    {
        return this._tkLambda_;
    }

    public void setTkLambda(TTkLambda node)
    {
        if(this._tkLambda_ != null)
        {
            this._tkLambda_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkLambda_ = node;
    }

    public TLeftParentheses getLeftParentheses()
    {
        return this._leftParentheses_;
    }

    public void setLeftParentheses(TLeftParentheses node)
    {
        if(this._leftParentheses_ != null)
        {
            this._leftParentheses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParentheses_ = node;
    }

    public PListIdentifiers getListIdentifiers()
    {
        return this._listIdentifiers_;
    }

    public void setListIdentifiers(PListIdentifiers node)
    {
        if(this._listIdentifiers_ != null)
        {
            this._listIdentifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listIdentifiers_ = node;
    }

    public TRightParentheses getRightParentheses()
    {
        return this._rightParentheses_;
    }

    public void setRightParentheses(TRightParentheses node)
    {
        if(this._rightParentheses_ != null)
        {
            this._rightParentheses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParentheses_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public TLeftBracket getLeftBracket()
    {
        return this._leftBracket_;
    }

    public void setLeftBracket(TLeftBracket node)
    {
        if(this._leftBracket_ != null)
        {
            this._leftBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBracket_ = node;
    }

    public PLambdaListExpressions getLambdaListExpressions()
    {
        return this._lambdaListExpressions_;
    }

    public void setLambdaListExpressions(PLambdaListExpressions node)
    {
        if(this._lambdaListExpressions_ != null)
        {
            this._lambdaListExpressions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lambdaListExpressions_ = node;
    }

    public TRightBracket getRightBracket()
    {
        return this._rightBracket_;
    }

    public void setRightBracket(TRightBracket node)
    {
        if(this._rightBracket_ != null)
        {
            this._rightBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tkLambda_)
            + toString(this._leftParentheses_)
            + toString(this._listIdentifiers_)
            + toString(this._rightParentheses_)
            + toString(this._colon_)
            + toString(this._term_)
            + toString(this._leftBracket_)
            + toString(this._lambdaListExpressions_)
            + toString(this._rightBracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tkLambda_ == child)
        {
            this._tkLambda_ = null;
            return;
        }

        if(this._leftParentheses_ == child)
        {
            this._leftParentheses_ = null;
            return;
        }

        if(this._listIdentifiers_ == child)
        {
            this._listIdentifiers_ = null;
            return;
        }

        if(this._rightParentheses_ == child)
        {
            this._rightParentheses_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._leftBracket_ == child)
        {
            this._leftBracket_ = null;
            return;
        }

        if(this._lambdaListExpressions_ == child)
        {
            this._lambdaListExpressions_ = null;
            return;
        }

        if(this._rightBracket_ == child)
        {
            this._rightBracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tkLambda_ == oldChild)
        {
            setTkLambda((TTkLambda) newChild);
            return;
        }

        if(this._leftParentheses_ == oldChild)
        {
            setLeftParentheses((TLeftParentheses) newChild);
            return;
        }

        if(this._listIdentifiers_ == oldChild)
        {
            setListIdentifiers((PListIdentifiers) newChild);
            return;
        }

        if(this._rightParentheses_ == oldChild)
        {
            setRightParentheses((TRightParentheses) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._leftBracket_ == oldChild)
        {
            setLeftBracket((TLeftBracket) newChild);
            return;
        }

        if(this._lambdaListExpressions_ == oldChild)
        {
            setLambdaListExpressions((PLambdaListExpressions) newChild);
            return;
        }

        if(this._rightBracket_ == oldChild)
        {
            setRightBracket((TRightBracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
