/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AFunctionExpressionAuxiliar extends PFunctionExpressionAuxiliar
{
    private TLeftParentheses _leftParentheses_;
    private PExpression _expression_;
    private TRightParentheses _rightParentheses_;

    public AFunctionExpressionAuxiliar()
    {
        // Constructor
    }

    public AFunctionExpressionAuxiliar(
        @SuppressWarnings("hiding") TLeftParentheses _leftParentheses_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRightParentheses _rightParentheses_)
    {
        // Constructor
        setLeftParentheses(_leftParentheses_);

        setExpression(_expression_);

        setRightParentheses(_rightParentheses_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionExpressionAuxiliar(
            cloneNode(this._leftParentheses_),
            cloneNode(this._expression_),
            cloneNode(this._rightParentheses_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionExpressionAuxiliar(this);
    }

    public TLeftParentheses getLeftParentheses()
    {
        return this._leftParentheses_;
    }

    public void setLeftParentheses(TLeftParentheses node)
    {
        if(this._leftParentheses_ != null)
        {
            this._leftParentheses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParentheses_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRightParentheses getRightParentheses()
    {
        return this._rightParentheses_;
    }

    public void setRightParentheses(TRightParentheses node)
    {
        if(this._rightParentheses_ != null)
        {
            this._rightParentheses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParentheses_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftParentheses_)
            + toString(this._expression_)
            + toString(this._rightParentheses_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftParentheses_ == child)
        {
            this._leftParentheses_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rightParentheses_ == child)
        {
            this._rightParentheses_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftParentheses_ == oldChild)
        {
            setLeftParentheses((TLeftParentheses) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rightParentheses_ == oldChild)
        {
            setRightParentheses((TRightParentheses) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
