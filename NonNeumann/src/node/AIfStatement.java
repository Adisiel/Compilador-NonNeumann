/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PIfStatement
{
    private PIfStatementExpAux _ifStatementExpAux_;
    private TThen _then_;
    private PTerm _term_;
    private PIfStatementElseAux _ifStatementElseAux_;

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") PIfStatementExpAux _ifStatementExpAux_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") PIfStatementElseAux _ifStatementElseAux_)
    {
        // Constructor
        setIfStatementExpAux(_ifStatementExpAux_);

        setThen(_then_);

        setTerm(_term_);

        setIfStatementElseAux(_ifStatementElseAux_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._ifStatementExpAux_),
            cloneNode(this._then_),
            cloneNode(this._term_),
            cloneNode(this._ifStatementElseAux_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public PIfStatementExpAux getIfStatementExpAux()
    {
        return this._ifStatementExpAux_;
    }

    public void setIfStatementExpAux(PIfStatementExpAux node)
    {
        if(this._ifStatementExpAux_ != null)
        {
            this._ifStatementExpAux_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifStatementExpAux_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public PIfStatementElseAux getIfStatementElseAux()
    {
        return this._ifStatementElseAux_;
    }

    public void setIfStatementElseAux(PIfStatementElseAux node)
    {
        if(this._ifStatementElseAux_ != null)
        {
            this._ifStatementElseAux_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifStatementElseAux_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifStatementExpAux_)
            + toString(this._then_)
            + toString(this._term_)
            + toString(this._ifStatementElseAux_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifStatementExpAux_ == child)
        {
            this._ifStatementExpAux_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._ifStatementElseAux_ == child)
        {
            this._ifStatementElseAux_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifStatementExpAux_ == oldChild)
        {
            setIfStatementExpAux((PIfStatementExpAux) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._ifStatementElseAux_ == oldChild)
        {
            setIfStatementElseAux((PIfStatementElseAux) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
