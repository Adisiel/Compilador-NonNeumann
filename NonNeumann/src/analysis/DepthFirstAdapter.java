/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PFunctionDescription> copy = new ArrayList<PFunctionDescription>(node.getFunctionDescription());
            for(PFunctionDescription e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFunctionDescription(AFunctionDescription node)
    {
        defaultIn(node);
    }

    public void outAFunctionDescription(AFunctionDescription node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDescription(AFunctionDescription node)
    {
        inAFunctionDescription(node);
        if(node.getEntry() != null)
        {
            node.getEntry().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFunctionParameters() != null)
        {
            node.getFunctionParameters().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFunctionExpression() != null)
        {
            node.getFunctionExpression().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outAFunctionDescription(node);
    }

    public void inAFunctionParameters(AFunctionParameters node)
    {
        defaultIn(node);
    }

    public void outAFunctionParameters(AFunctionParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParameters(AFunctionParameters node)
    {
        inAFunctionParameters(node);
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        {
            List<PParameters> copy = new ArrayList<PParameters>(node.getParameters());
            for(PParameters e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outAFunctionParameters(node);
    }

    public void inAFunctionExpression(AFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression(AFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression(AFunctionExpression node)
    {
        inAFunctionExpression(node);
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outAFunctionExpression(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAParameters(AParameters node)
    {
        defaultIn(node);
    }

    public void outAParameters(AParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameters(AParameters node)
    {
        inAParameters(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        {
            List<PParametersSequence> copy = new ArrayList<PParametersSequence>(node.getParametersSequence());
            for(PParametersSequence e : copy)
            {
                e.apply(this);
            }
        }
        outAParameters(node);
    }

    public void inAParametersSequence(AParametersSequence node)
    {
        defaultIn(node);
    }

    public void outAParametersSequence(AParametersSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersSequence(AParametersSequence node)
    {
        inAParametersSequence(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAParametersSequence(node);
    }

    public void inATypeParameter(ATypeParameter node)
    {
        defaultIn(node);
    }

    public void outATypeParameter(ATypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        inATypeParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeParameter(node);
    }

    public void inAAssignFunctionParameter(AAssignFunctionParameter node)
    {
        defaultIn(node);
    }

    public void outAAssignFunctionParameter(AAssignFunctionParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignFunctionParameter(AAssignFunctionParameter node)
    {
        inAAssignFunctionParameter(node);
        if(node.getAssignFunction() != null)
        {
            node.getAssignFunction().apply(this);
        }
        outAAssignFunctionParameter(node);
    }

    public void inAAssignFunction(AAssignFunction node)
    {
        defaultIn(node);
    }

    public void outAAssignFunction(AAssignFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignFunction(AAssignFunction node)
    {
        inAAssignFunction(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getParametersAssign() != null)
        {
            node.getParametersAssign().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outAAssignFunction(node);
    }

    public void inAParametersAssign(AParametersAssign node)
    {
        defaultIn(node);
    }

    public void outAParametersAssign(AParametersAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersAssign(AParametersAssign node)
    {
        inAParametersAssign(node);
        if(node.getParameterAssign() != null)
        {
            node.getParameterAssign().apply(this);
        }
        {
            List<PParametersAssignSequence> copy = new ArrayList<PParametersAssignSequence>(node.getParametersAssignSequence());
            for(PParametersAssignSequence e : copy)
            {
                e.apply(this);
            }
        }
        outAParametersAssign(node);
    }

    public void inAParametersAssignSequence(AParametersAssignSequence node)
    {
        defaultIn(node);
    }

    public void outAParametersAssignSequence(AParametersAssignSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersAssignSequence(AParametersAssignSequence node)
    {
        inAParametersAssignSequence(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameterAssign() != null)
        {
            node.getParameterAssign().apply(this);
        }
        outAParametersAssignSequence(node);
    }

    public void inATypeParameterAssign(ATypeParameterAssign node)
    {
        defaultIn(node);
    }

    public void outATypeParameterAssign(ATypeParameterAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameterAssign(ATypeParameterAssign node)
    {
        inATypeParameterAssign(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeParameterAssign(node);
    }

    public void inAAssignFunctionParameterAssign(AAssignFunctionParameterAssign node)
    {
        defaultIn(node);
    }

    public void outAAssignFunctionParameterAssign(AAssignFunctionParameterAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignFunctionParameterAssign(AAssignFunctionParameterAssign node)
    {
        inAAssignFunctionParameterAssign(node);
        if(node.getAssignFunction() != null)
        {
            node.getAssignFunction().apply(this);
        }
        outAAssignFunctionParameterAssign(node);
    }

    public void inAOperationExpression(AOperationExpression node)
    {
        defaultIn(node);
    }

    public void outAOperationExpression(AOperationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperationExpression(AOperationExpression node)
    {
        inAOperationExpression(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAOperationExpression(node);
    }

    public void inAGtExpression(AGtExpression node)
    {
        defaultIn(node);
    }

    public void outAGtExpression(AGtExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpression(AGtExpression node)
    {
        inAGtExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBigger() != null)
        {
            node.getBigger().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAGtExpression(node);
    }

    public void inALtExpression(ALtExpression node)
    {
        defaultIn(node);
    }

    public void outALtExpression(ALtExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpression(ALtExpression node)
    {
        inALtExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMinor() != null)
        {
            node.getMinor().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outALtExpression(node);
    }

    public void inAEqualExpression(AEqualExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualExpression(AEqualExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExpression(AEqualExpression node)
    {
        inAEqualExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAEqualExpression(node);
    }

    public void inANegationExpression(ANegationExpression node)
    {
        defaultIn(node);
    }

    public void outANegationExpression(ANegationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegationExpression(ANegationExpression node)
    {
        inANegationExpression(node);
        if(node.getExclamation() != null)
        {
            node.getExclamation().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outANegationExpression(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAIfThenElseStatementExpression(AIfThenElseStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementExpression(AIfThenElseStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementExpression(AIfThenElseStatementExpression node)
    {
        inAIfThenElseStatementExpression(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfThenElseStatementExpression(node);
    }

    public void inALambdaExpression(ALambdaExpression node)
    {
        defaultIn(node);
    }

    public void outALambdaExpression(ALambdaExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaExpression(ALambdaExpression node)
    {
        inALambdaExpression(node);
        if(node.getLambda() != null)
        {
            node.getLambda().apply(this);
        }
        outALambdaExpression(node);
    }

    public void inAFactorOperation(AFactorOperation node)
    {
        defaultIn(node);
    }

    public void outAFactorOperation(AFactorOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorOperation(AFactorOperation node)
    {
        inAFactorOperation(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorOperation(node);
    }

    public void inAPlusOperation(APlusOperation node)
    {
        defaultIn(node);
    }

    public void outAPlusOperation(APlusOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperation(APlusOperation node)
    {
        inAPlusOperation(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusOperation(node);
    }

    public void inAMinusOperation(AMinusOperation node)
    {
        defaultIn(node);
    }

    public void outAMinusOperation(AMinusOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperation(AMinusOperation node)
    {
        inAMinusOperation(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusOperation(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inANegativeNumberFactor(ANegativeNumberFactor node)
    {
        defaultIn(node);
    }

    public void outANegativeNumberFactor(ANegativeNumberFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeNumberFactor(ANegativeNumberFactor node)
    {
        inANegativeNumberFactor(node);
        if(node.getNegativeNumber() != null)
        {
            node.getNegativeNumber().apply(this);
        }
        outANegativeNumberFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getProduct() != null)
        {
            node.getProduct().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModFactor(node);
    }

    public void inALiteralTerm(ALiteralTerm node)
    {
        defaultIn(node);
    }

    public void outALiteralTerm(ALiteralTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralTerm(ALiteralTerm node)
    {
        inALiteralTerm(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralTerm(node);
    }

    public void inABlockExpressionTerm(ABlockExpressionTerm node)
    {
        defaultIn(node);
    }

    public void outABlockExpressionTerm(ABlockExpressionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExpressionTerm(ABlockExpressionTerm node)
    {
        inABlockExpressionTerm(node);
        if(node.getBlockExpression() != null)
        {
            node.getBlockExpression().apply(this);
        }
        outABlockExpressionTerm(node);
    }

    public void inACallFunctionTerm(ACallFunctionTerm node)
    {
        defaultIn(node);
    }

    public void outACallFunctionTerm(ACallFunctionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunctionTerm(ACallFunctionTerm node)
    {
        inACallFunctionTerm(node);
        if(node.getCallFunction() != null)
        {
            node.getCallFunction().apply(this);
        }
        outACallFunctionTerm(node);
    }

    public void inANegativeNumber(ANegativeNumber node)
    {
        defaultIn(node);
    }

    public void outANegativeNumber(ANegativeNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeNumber(ANegativeNumber node)
    {
        inANegativeNumber(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outANegativeNumber(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inAFloatLiteral(AFloatLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatLiteral(AFloatLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatLiteral(AFloatLiteral node)
    {
        inAFloatLiteral(node);
        if(node.getNumeralFloat() != null)
        {
            node.getNumeralFloat().apply(this);
        }
        outAFloatLiteral(node);
    }

    public void inAIntLiteral(AIntLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntLiteral(AIntLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        inAIntLiteral(node);
        if(node.getNumeralInt() != null)
        {
            node.getNumeralInt().apply(this);
        }
        outAIntLiteral(node);
    }

    public void inAIdentifierLiteral(AIdentifierLiteral node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLiteral(AIdentifierLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLiteral(AIdentifierLiteral node)
    {
        inAIdentifierLiteral(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierLiteral(node);
    }

    public void inATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanValue(ATrueBooleanValue node)
    {
        inATrueBooleanValue(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanValue(node);
    }

    public void inAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanValue(AFalseBooleanValue node)
    {
        inAFalseBooleanValue(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanValue(node);
    }

    public void inAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        defaultIn(node);
    }

    public void outAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        inAFloatNumeralFloat(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatNumeralFloat(node);
    }

    public void inACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        defaultIn(node);
    }

    public void outACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        inACientificNotationNumeralFloat(node);
        if(node.getCientificNotation() != null)
        {
            node.getCientificNotation().apply(this);
        }
        outACientificNotationNumeralFloat(node);
    }

    public void inAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        defaultIn(node);
    }

    public void outAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        inAIntDecimalNumeralInt(node);
        if(node.getIntDecimal() != null)
        {
            node.getIntDecimal().apply(this);
        }
        outAIntDecimalNumeralInt(node);
    }

    public void inAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        defaultIn(node);
    }

    public void outAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        inAIntHexadecimalNumeralInt(node);
        if(node.getIntHexadecimal() != null)
        {
            node.getIntHexadecimal().apply(this);
        }
        outAIntHexadecimalNumeralInt(node);
    }

    public void inABlockExpression(ABlockExpression node)
    {
        defaultIn(node);
    }

    public void outABlockExpression(ABlockExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExpression(ABlockExpression node)
    {
        inABlockExpression(node);
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        {
            List<PDeclarationConstant> copy = new ArrayList<PDeclarationConstant>(node.getDeclarationConstant());
            for(PDeclarationConstant e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outABlockExpression(node);
    }

    public void inADeclarationConstant(ADeclarationConstant node)
    {
        defaultIn(node);
    }

    public void outADeclarationConstant(ADeclarationConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationConstant(ADeclarationConstant node)
    {
        inADeclarationConstant(node);
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outADeclarationConstant(node);
    }

    public void inACallFunction(ACallFunction node)
    {
        defaultIn(node);
    }

    public void outACallFunction(ACallFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunction(ACallFunction node)
    {
        inACallFunction(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getListExpressions() != null)
        {
            node.getListExpressions().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        outACallFunction(node);
    }

    public void inALambda(ALambda node)
    {
        defaultIn(node);
    }

    public void outALambda(ALambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambda(ALambda node)
    {
        inALambda(node);
        if(node.getTkLambda() != null)
        {
            node.getTkLambda().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getListIdentifiers() != null)
        {
            node.getListIdentifiers().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getListExpressions() != null)
        {
            node.getListExpressions().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outALambda(node);
    }

    public void inAListIdentifiers(AListIdentifiers node)
    {
        defaultIn(node);
    }

    public void outAListIdentifiers(AListIdentifiers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIdentifiers(AListIdentifiers node)
    {
        inAListIdentifiers(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PListIdentifiersSequence> copy = new ArrayList<PListIdentifiersSequence>(node.getListIdentifiersSequence());
            for(PListIdentifiersSequence e : copy)
            {
                e.apply(this);
            }
        }
        outAListIdentifiers(node);
    }

    public void inAListIdentifiersSequence(AListIdentifiersSequence node)
    {
        defaultIn(node);
    }

    public void outAListIdentifiersSequence(AListIdentifiersSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIdentifiersSequence(AListIdentifiersSequence node)
    {
        inAListIdentifiersSequence(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAListIdentifiersSequence(node);
    }

    public void inAListExpressions(AListExpressions node)
    {
        defaultIn(node);
    }

    public void outAListExpressions(AListExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpressions(AListExpressions node)
    {
        inAListExpressions(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PListExpressionsSequence> copy = new ArrayList<PListExpressionsSequence>(node.getListExpressionsSequence());
            for(PListExpressionsSequence e : copy)
            {
                e.apply(this);
            }
        }
        outAListExpressions(node);
    }

    public void inAListExpressionsSequence(AListExpressionsSequence node)
    {
        defaultIn(node);
    }

    public void outAListExpressionsSequence(AListExpressionsSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpressionsSequence(AListExpressionsSequence node)
    {
        inAListExpressionsSequence(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAListExpressionsSequence(node);
    }

    public void inAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        inAIfThenElseStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outAIfThenElseStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAElseStatement(node);
    }
}
