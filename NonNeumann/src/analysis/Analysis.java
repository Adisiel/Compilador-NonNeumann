/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseADecFunction(ADecFunction node);
    void caseAFunctionParamAuxiliar(AFunctionParamAuxiliar node);
    void caseAFunctionExpressionAuxiliar(AFunctionExpressionAuxiliar node);
    void caseAIntType(AIntType node);
    void caseARealType(ARealType node);
    void caseABoolType(ABoolType node);
    void caseAParameters(AParameters node);
    void caseAParametersAuxiliar(AParametersAuxiliar node);
    void caseADecParameter(ADecParameter node);
    void caseAAssignParameter(AAssignParameter node);
    void caseAAssign(AAssign node);
    void caseAParametersAssign(AParametersAssign node);
    void caseAParametersAssignAux(AParametersAssignAux node);
    void caseATypeParameterAssign(ATypeParameterAssign node);
    void caseAAssignParameterAssign(AAssignParameterAssign node);
    void caseAOpExpression(AOpExpression node);
    void caseAGtExpression(AGtExpression node);
    void caseALtExpression(ALtExpression node);
    void caseAEqualExpression(AEqualExpression node);
    void caseANegBoolExpression(ANegBoolExpression node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAIfStatementExpression(AIfStatementExpression node);
    void caseALambdaExpression(ALambdaExpression node);
    void caseAFactorOp(AFactorOp node);
    void caseAPlusOp(APlusOp node);
    void caseAMinusOp(AMinusOp node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseANegFactor(ANegFactor node);
    void caseAModFactor(AModFactor node);
    void caseALiteralTerm(ALiteralTerm node);
    void caseAExpressionTerm(AExpressionTerm node);
    void caseACallFunctionTerm(ACallFunctionTerm node);
    void caseANegation(ANegation node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseAFloatLiteral(AFloatLiteral node);
    void caseAIntLiteral(AIntLiteral node);
    void caseATrueBooleanValue(ATrueBooleanValue node);
    void caseAFalseBooleanValue(AFalseBooleanValue node);
    void caseAFloatNumeralFloat(AFloatNumeralFloat node);
    void caseACientificNotationNumeralFloat(ACientificNotationNumeralFloat node);
    void caseAIntDecimalNumeralInt(AIntDecimalNumeralInt node);
    void caseAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node);
    void caseACallFunctionCallFunction(ACallFunctionCallFunction node);
    void caseAListExpressionsListExpressions(AListExpressionsListExpressions node);
    void caseAListExpressionsAuxListExpressionsAux(AListExpressionsAuxListExpressionsAux node);
    void caseADeclarationConstantDeclarationConstant(ADeclarationConstantDeclarationConstant node);
    void caseALambda(ALambda node);
    void caseALambdaListExpressions(ALambdaListExpressions node);
    void caseALambdaListExpressionsAuxiliar(ALambdaListExpressionsAuxiliar node);
    void caseAListIdentifiers(AListIdentifiers node);
    void caseAListIdentifiersAux(AListIdentifiersAux node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfStatementExpAux(AIfStatementExpAux node);
    void caseAIfStatementElseAux(AIfStatementElseAux node);

    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTConstant(TConstant node);
    void caseTFunction(TFunction node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTReal(TReal node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTThen(TThen node);
    void caseTTkLambda(TTkLambda node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTEntry(TEntry node);
    void caseTLeftParentheses(TLeftParentheses node);
    void caseTRightParentheses(TRightParentheses node);
    void caseTEqual(TEqual node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDivide(TDivide node);
    void caseTProduct(TProduct node);
    void caseTModule(TModule node);
    void caseTExclamation(TExclamation node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTMinor(TMinor node);
    void caseTBigger(TBigger node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTColon(TColon node);
    void caseTPower(TPower node);
    void caseTIntHexadecimal(TIntHexadecimal node);
    void caseTIntDecimal(TIntDecimal node);
    void caseTFloat(TFloat node);
    void caseTCientificNotation(TCientificNotation node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTBlockComment(TBlockComment node);
    void caseEOF(EOF node);
}
