/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDecFunction> copy = new ArrayList<PDecFunction>(node.getDecFunction());
            Collections.reverse(copy);
            for(PDecFunction e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADecFunction(ADecFunction node)
    {
        defaultIn(node);
    }

    public void outADecFunction(ADecFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFunction(ADecFunction node)
    {
        inADecFunction(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getFunctionExpressionAuxiliar() != null)
        {
            node.getFunctionExpressionAuxiliar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFunctionParamAuxiliar() != null)
        {
            node.getFunctionParamAuxiliar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getEntry() != null)
        {
            node.getEntry().apply(this);
        }
        outADecFunction(node);
    }

    public void inAFunctionParamAuxiliar(AFunctionParamAuxiliar node)
    {
        defaultIn(node);
    }

    public void outAFunctionParamAuxiliar(AFunctionParamAuxiliar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParamAuxiliar(AFunctionParamAuxiliar node)
    {
        inAFunctionParamAuxiliar(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        {
            List<PParameters> copy = new ArrayList<PParameters>(node.getParameters());
            Collections.reverse(copy);
            for(PParameters e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        outAFunctionParamAuxiliar(node);
    }

    public void inAFunctionExpressionAuxiliar(AFunctionExpressionAuxiliar node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpressionAuxiliar(AFunctionExpressionAuxiliar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpressionAuxiliar(AFunctionExpressionAuxiliar node)
    {
        inAFunctionExpressionAuxiliar(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        outAFunctionExpressionAuxiliar(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAParameters(AParameters node)
    {
        defaultIn(node);
    }

    public void outAParameters(AParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameters(AParameters node)
    {
        inAParameters(node);
        {
            List<PParametersAuxiliar> copy = new ArrayList<PParametersAuxiliar>(node.getParametersAuxiliar());
            Collections.reverse(copy);
            for(PParametersAuxiliar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAParameters(node);
    }

    public void inAParametersAuxiliar(AParametersAuxiliar node)
    {
        defaultIn(node);
    }

    public void outAParametersAuxiliar(AParametersAuxiliar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersAuxiliar(AParametersAuxiliar node)
    {
        inAParametersAuxiliar(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParametersAuxiliar(node);
    }

    public void inADecParameter(ADecParameter node)
    {
        defaultIn(node);
    }

    public void outADecParameter(ADecParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecParameter(ADecParameter node)
    {
        inADecParameter(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADecParameter(node);
    }

    public void inAAssignParameter(AAssignParameter node)
    {
        defaultIn(node);
    }

    public void outAAssignParameter(AAssignParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignParameter(AAssignParameter node)
    {
        inAAssignParameter(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignParameter(node);
    }

    public void inAAssign(AAssign node)
    {
        defaultIn(node);
    }

    public void outAAssign(AAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssign(AAssign node)
    {
        inAAssign(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getParameterAssign() != null)
        {
            node.getParameterAssign().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAAssign(node);
    }

    public void inAParametersAssign(AParametersAssign node)
    {
        defaultIn(node);
    }

    public void outAParametersAssign(AParametersAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersAssign(AParametersAssign node)
    {
        inAParametersAssign(node);
        {
            List<PParametersAssignAux> copy = new ArrayList<PParametersAssignAux>(node.getParametersAssignAux());
            Collections.reverse(copy);
            for(PParametersAssignAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameterAssign() != null)
        {
            node.getParameterAssign().apply(this);
        }
        outAParametersAssign(node);
    }

    public void inAParametersAssignAux(AParametersAssignAux node)
    {
        defaultIn(node);
    }

    public void outAParametersAssignAux(AParametersAssignAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersAssignAux(AParametersAssignAux node)
    {
        inAParametersAssignAux(node);
        if(node.getParametersAssign() != null)
        {
            node.getParametersAssign().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParametersAssignAux(node);
    }

    public void inATypeParameterAssign(ATypeParameterAssign node)
    {
        defaultIn(node);
    }

    public void outATypeParameterAssign(ATypeParameterAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameterAssign(ATypeParameterAssign node)
    {
        inATypeParameterAssign(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeParameterAssign(node);
    }

    public void inAAssignParameterAssign(AAssignParameterAssign node)
    {
        defaultIn(node);
    }

    public void outAAssignParameterAssign(AAssignParameterAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignParameterAssign(AAssignParameterAssign node)
    {
        inAAssignParameterAssign(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignParameterAssign(node);
    }

    public void inAOpExpression(AOpExpression node)
    {
        defaultIn(node);
    }

    public void outAOpExpression(AOpExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpExpression(AOpExpression node)
    {
        inAOpExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAOpExpression(node);
    }

    public void inAGtExpression(AGtExpression node)
    {
        defaultIn(node);
    }

    public void outAGtExpression(AGtExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpression(AGtExpression node)
    {
        inAGtExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getBigger() != null)
        {
            node.getBigger().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGtExpression(node);
    }

    public void inALtExpression(ALtExpression node)
    {
        defaultIn(node);
    }

    public void outALtExpression(ALtExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpression(ALtExpression node)
    {
        inALtExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getMinor() != null)
        {
            node.getMinor().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALtExpression(node);
    }

    public void inAEqualExpression(AEqualExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualExpression(AEqualExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExpression(AEqualExpression node)
    {
        inAEqualExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEqualExpression(node);
    }

    public void inANegBoolExpression(ANegBoolExpression node)
    {
        defaultIn(node);
    }

    public void outANegBoolExpression(ANegBoolExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegBoolExpression(ANegBoolExpression node)
    {
        inANegBoolExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getExclamation() != null)
        {
            node.getExclamation().apply(this);
        }
        outANegBoolExpression(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAIfStatementExpression(AIfStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAIfStatementExpression(AIfStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementExpression(AIfStatementExpression node)
    {
        inAIfStatementExpression(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatementExpression(node);
    }

    public void inALambdaExpression(ALambdaExpression node)
    {
        defaultIn(node);
    }

    public void outALambdaExpression(ALambdaExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaExpression(ALambdaExpression node)
    {
        inALambdaExpression(node);
        if(node.getLambda() != null)
        {
            node.getLambda().apply(this);
        }
        outALambdaExpression(node);
    }

    public void inAFactorOp(AFactorOp node)
    {
        defaultIn(node);
    }

    public void outAFactorOp(AFactorOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorOp(AFactorOp node)
    {
        inAFactorOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorOp(node);
    }

    public void inAPlusOp(APlusOp node)
    {
        defaultIn(node);
    }

    public void outAPlusOp(APlusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        inAPlusOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAPlusOp(node);
    }

    public void inAMinusOp(AMinusOp node)
    {
        defaultIn(node);
    }

    public void outAMinusOp(AMinusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        inAMinusOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAMinusOp(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getProduct() != null)
        {
            node.getProduct().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivFactor(node);
    }

    public void inANegFactor(ANegFactor node)
    {
        defaultIn(node);
    }

    public void outANegFactor(ANegFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegFactor(ANegFactor node)
    {
        inANegFactor(node);
        if(node.getNegation() != null)
        {
            node.getNegation().apply(this);
        }
        outANegFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModFactor(node);
    }

    public void inALiteralTerm(ALiteralTerm node)
    {
        defaultIn(node);
    }

    public void outALiteralTerm(ALiteralTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralTerm(ALiteralTerm node)
    {
        inALiteralTerm(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralTerm(node);
    }

    public void inAExpressionTerm(AExpressionTerm node)
    {
        defaultIn(node);
    }

    public void outAExpressionTerm(AExpressionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionTerm(AExpressionTerm node)
    {
        inAExpressionTerm(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PDeclarationConstant> copy = new ArrayList<PDeclarationConstant>(node.getDeclarationConstant());
            Collections.reverse(copy);
            for(PDeclarationConstant e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        outAExpressionTerm(node);
    }

    public void inACallFunctionTerm(ACallFunctionTerm node)
    {
        defaultIn(node);
    }

    public void outACallFunctionTerm(ACallFunctionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunctionTerm(ACallFunctionTerm node)
    {
        inACallFunctionTerm(node);
        if(node.getCallFunction() != null)
        {
            node.getCallFunction().apply(this);
        }
        outACallFunctionTerm(node);
    }

    public void inANegation(ANegation node)
    {
        defaultIn(node);
    }

    public void outANegation(ANegation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegation(ANegation node)
    {
        inANegation(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegation(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inAFloatLiteral(AFloatLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatLiteral(AFloatLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatLiteral(AFloatLiteral node)
    {
        inAFloatLiteral(node);
        if(node.getNumeralFloat() != null)
        {
            node.getNumeralFloat().apply(this);
        }
        outAFloatLiteral(node);
    }

    public void inAIntLiteral(AIntLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntLiteral(AIntLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        inAIntLiteral(node);
        if(node.getNumeralInt() != null)
        {
            node.getNumeralInt().apply(this);
        }
        outAIntLiteral(node);
    }

    public void inATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanValue(ATrueBooleanValue node)
    {
        inATrueBooleanValue(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanValue(node);
    }

    public void inAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanValue(AFalseBooleanValue node)
    {
        inAFalseBooleanValue(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanValue(node);
    }

    public void inAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        defaultIn(node);
    }

    public void outAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatNumeralFloat(AFloatNumeralFloat node)
    {
        inAFloatNumeralFloat(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatNumeralFloat(node);
    }

    public void inACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        defaultIn(node);
    }

    public void outACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACientificNotationNumeralFloat(ACientificNotationNumeralFloat node)
    {
        inACientificNotationNumeralFloat(node);
        if(node.getCientificNotation() != null)
        {
            node.getCientificNotation().apply(this);
        }
        outACientificNotationNumeralFloat(node);
    }

    public void inAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        defaultIn(node);
    }

    public void outAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDecimalNumeralInt(AIntDecimalNumeralInt node)
    {
        inAIntDecimalNumeralInt(node);
        if(node.getIntDecimal() != null)
        {
            node.getIntDecimal().apply(this);
        }
        outAIntDecimalNumeralInt(node);
    }

    public void inAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        defaultIn(node);
    }

    public void outAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntHexadecimalNumeralInt(AIntHexadecimalNumeralInt node)
    {
        inAIntHexadecimalNumeralInt(node);
        if(node.getIntHexadecimal() != null)
        {
            node.getIntHexadecimal().apply(this);
        }
        outAIntHexadecimalNumeralInt(node);
    }

    public void inACallFunctionCallFunction(ACallFunctionCallFunction node)
    {
        defaultIn(node);
    }

    public void outACallFunctionCallFunction(ACallFunctionCallFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunctionCallFunction(ACallFunctionCallFunction node)
    {
        inACallFunctionCallFunction(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getListExpressions() != null)
        {
            node.getListExpressions().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACallFunctionCallFunction(node);
    }

    public void inAListExpressionsListExpressions(AListExpressionsListExpressions node)
    {
        defaultIn(node);
    }

    public void outAListExpressionsListExpressions(AListExpressionsListExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpressionsListExpressions(AListExpressionsListExpressions node)
    {
        inAListExpressionsListExpressions(node);
        {
            List<PListExpressionsAux> copy = new ArrayList<PListExpressionsAux>(node.getListExpressionsAux());
            Collections.reverse(copy);
            for(PListExpressionsAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAListExpressionsListExpressions(node);
    }

    public void inAListExpressionsAuxListExpressionsAux(AListExpressionsAuxListExpressionsAux node)
    {
        defaultIn(node);
    }

    public void outAListExpressionsAuxListExpressionsAux(AListExpressionsAuxListExpressionsAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpressionsAuxListExpressionsAux(AListExpressionsAuxListExpressionsAux node)
    {
        inAListExpressionsAuxListExpressionsAux(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAListExpressionsAuxListExpressionsAux(node);
    }

    public void inADeclarationConstantDeclarationConstant(ADeclarationConstantDeclarationConstant node)
    {
        defaultIn(node);
    }

    public void outADeclarationConstantDeclarationConstant(ADeclarationConstantDeclarationConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationConstantDeclarationConstant(ADeclarationConstantDeclarationConstant node)
    {
        inADeclarationConstantDeclarationConstant(node);
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        outADeclarationConstantDeclarationConstant(node);
    }

    public void inALambda(ALambda node)
    {
        defaultIn(node);
    }

    public void outALambda(ALambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambda(ALambda node)
    {
        inALambda(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getLambdaListExpressions() != null)
        {
            node.getLambdaListExpressions().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRightParentheses() != null)
        {
            node.getRightParentheses().apply(this);
        }
        if(node.getListIdentifiers() != null)
        {
            node.getListIdentifiers().apply(this);
        }
        if(node.getLeftParentheses() != null)
        {
            node.getLeftParentheses().apply(this);
        }
        if(node.getTkLambda() != null)
        {
            node.getTkLambda().apply(this);
        }
        outALambda(node);
    }

    public void inALambdaListExpressions(ALambdaListExpressions node)
    {
        defaultIn(node);
    }

    public void outALambdaListExpressions(ALambdaListExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaListExpressions(ALambdaListExpressions node)
    {
        inALambdaListExpressions(node);
        {
            List<PLambdaListExpressionsAuxiliar> copy = new ArrayList<PLambdaListExpressionsAuxiliar>(node.getLambdaListExpressionsAuxiliar());
            Collections.reverse(copy);
            for(PLambdaListExpressionsAuxiliar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALambdaListExpressions(node);
    }

    public void inALambdaListExpressionsAuxiliar(ALambdaListExpressionsAuxiliar node)
    {
        defaultIn(node);
    }

    public void outALambdaListExpressionsAuxiliar(ALambdaListExpressionsAuxiliar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaListExpressionsAuxiliar(ALambdaListExpressionsAuxiliar node)
    {
        inALambdaListExpressionsAuxiliar(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outALambdaListExpressionsAuxiliar(node);
    }

    public void inAListIdentifiers(AListIdentifiers node)
    {
        defaultIn(node);
    }

    public void outAListIdentifiers(AListIdentifiers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIdentifiers(AListIdentifiers node)
    {
        inAListIdentifiers(node);
        {
            List<PListIdentifiersAux> copy = new ArrayList<PListIdentifiersAux>(node.getListIdentifiersAux());
            Collections.reverse(copy);
            for(PListIdentifiersAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAListIdentifiers(node);
    }

    public void inAListIdentifiersAux(AListIdentifiersAux node)
    {
        defaultIn(node);
    }

    public void outAListIdentifiersAux(AListIdentifiersAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIdentifiersAux(AListIdentifiersAux node)
    {
        inAListIdentifiersAux(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAListIdentifiersAux(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfStatementElseAux() != null)
        {
            node.getIfStatementElseAux().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getIfStatementExpAux() != null)
        {
            node.getIfStatementExpAux().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfStatementExpAux(AIfStatementExpAux node)
    {
        defaultIn(node);
    }

    public void outAIfStatementExpAux(AIfStatementExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementExpAux(AIfStatementExpAux node)
    {
        inAIfStatementExpAux(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStatementExpAux(node);
    }

    public void inAIfStatementElseAux(AIfStatementElseAux node)
    {
        defaultIn(node);
    }

    public void outAIfStatementElseAux(AIfStatementElseAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementElseAux(AIfStatementElseAux node)
    {
        inAIfStatementElseAux(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfStatementElseAux(node);
    }
}
