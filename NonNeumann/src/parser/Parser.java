/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAdecfunction1DecFunction */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAdecfunction2DecFunction */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAfunctionparamauxiliar1FunctionParamAuxiliar */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAfunctionparamauxiliar2FunctionParamAuxiliar */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AFunctionExpressionAuxiliar */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AIntType */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce ARealType */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce ABoolType */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AAparameters1Parameters */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AAparameters2Parameters */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AParametersAuxiliar */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce ADecParameter */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AAssignParameter */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AAssign */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce AAparametersassign1ParametersAssign */
		    {
			ArrayList list = new15();
			push(goTo(9), list, false);
		    }
		    break;
                    case 16: /* reduce AAparametersassign2ParametersAssign */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AParametersAssignAux */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce ATypeParameterAssign */
		    {
			ArrayList list = new18();
			push(goTo(11), list, false);
		    }
		    break;
                    case 19: /* reduce AAssignParameterAssign */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce AOpExpression */
		    {
			ArrayList list = new20();
			push(goTo(12), list, false);
		    }
		    break;
                    case 21: /* reduce AGtExpression */
		    {
			ArrayList list = new21();
			push(goTo(12), list, false);
		    }
		    break;
                    case 22: /* reduce ALtExpression */
		    {
			ArrayList list = new22();
			push(goTo(12), list, false);
		    }
		    break;
                    case 23: /* reduce AEqualExpression */
		    {
			ArrayList list = new23();
			push(goTo(12), list, false);
		    }
		    break;
                    case 24: /* reduce ANegBoolExpression */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce AOrExpression */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AAndExpression */
		    {
			ArrayList list = new26();
			push(goTo(12), list, false);
		    }
		    break;
                    case 27: /* reduce AIfStatementExpression */
		    {
			ArrayList list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce ALambdaExpression */
		    {
			ArrayList list = new28();
			push(goTo(12), list, false);
		    }
		    break;
                    case 29: /* reduce AFactorOp */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce APlusOp */
		    {
			ArrayList list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce AMinusOp */
		    {
			ArrayList list = new31();
			push(goTo(13), list, false);
		    }
		    break;
                    case 32: /* reduce ATermFactor */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce AMultFactor */
		    {
			ArrayList list = new33();
			push(goTo(14), list, false);
		    }
		    break;
                    case 34: /* reduce ADivFactor */
		    {
			ArrayList list = new34();
			push(goTo(14), list, false);
		    }
		    break;
                    case 35: /* reduce ANegFactor */
		    {
			ArrayList list = new35();
			push(goTo(14), list, false);
		    }
		    break;
                    case 36: /* reduce AModFactor */
		    {
			ArrayList list = new36();
			push(goTo(14), list, false);
		    }
		    break;
                    case 37: /* reduce ALiteralTerm */
		    {
			ArrayList list = new37();
			push(goTo(15), list, false);
		    }
		    break;
                    case 38: /* reduce AAexpressionterm1Term */
		    {
			ArrayList list = new38();
			push(goTo(15), list, false);
		    }
		    break;
                    case 39: /* reduce AAexpressionterm2Term */
		    {
			ArrayList list = new39();
			push(goTo(15), list, false);
		    }
		    break;
                    case 40: /* reduce ACallFunctionTerm */
		    {
			ArrayList list = new40();
			push(goTo(15), list, false);
		    }
		    break;
                    case 41: /* reduce ANegation */
		    {
			ArrayList list = new41();
			push(goTo(16), list, false);
		    }
		    break;
                    case 42: /* reduce ABooleanLiteral */
		    {
			ArrayList list = new42();
			push(goTo(17), list, false);
		    }
		    break;
                    case 43: /* reduce AFloatLiteral */
		    {
			ArrayList list = new43();
			push(goTo(17), list, false);
		    }
		    break;
                    case 44: /* reduce AIntLiteral */
		    {
			ArrayList list = new44();
			push(goTo(17), list, false);
		    }
		    break;
                    case 45: /* reduce ATrueBooleanValue */
		    {
			ArrayList list = new45();
			push(goTo(18), list, false);
		    }
		    break;
                    case 46: /* reduce AFalseBooleanValue */
		    {
			ArrayList list = new46();
			push(goTo(18), list, false);
		    }
		    break;
                    case 47: /* reduce AFloatNumeralFloat */
		    {
			ArrayList list = new47();
			push(goTo(19), list, false);
		    }
		    break;
                    case 48: /* reduce ACientificNotationNumeralFloat */
		    {
			ArrayList list = new48();
			push(goTo(19), list, false);
		    }
		    break;
                    case 49: /* reduce AIntDecimalNumeralInt */
		    {
			ArrayList list = new49();
			push(goTo(20), list, false);
		    }
		    break;
                    case 50: /* reduce AIntHexadecimalNumeralInt */
		    {
			ArrayList list = new50();
			push(goTo(20), list, false);
		    }
		    break;
                    case 51: /* reduce AAcallfunctioncallfunction1CallFunction */
		    {
			ArrayList list = new51();
			push(goTo(21), list, false);
		    }
		    break;
                    case 52: /* reduce AAcallfunctioncallfunction2CallFunction */
		    {
			ArrayList list = new52();
			push(goTo(21), list, false);
		    }
		    break;
                    case 53: /* reduce AAlistexpressionslistexpressions1ListExpressions */
		    {
			ArrayList list = new53();
			push(goTo(22), list, false);
		    }
		    break;
                    case 54: /* reduce AAlistexpressionslistexpressions2ListExpressions */
		    {
			ArrayList list = new54();
			push(goTo(22), list, false);
		    }
		    break;
                    case 55: /* reduce AListExpressionsAuxListExpressionsAux */
		    {
			ArrayList list = new55();
			push(goTo(23), list, false);
		    }
		    break;
                    case 56: /* reduce ADeclarationConstantDeclarationConstant */
		    {
			ArrayList list = new56();
			push(goTo(24), list, false);
		    }
		    break;
                    case 57: /* reduce AAlambda1Lambda */
		    {
			ArrayList list = new57();
			push(goTo(25), list, false);
		    }
		    break;
                    case 58: /* reduce AAlambda2Lambda */
		    {
			ArrayList list = new58();
			push(goTo(25), list, false);
		    }
		    break;
                    case 59: /* reduce AAlambda3Lambda */
		    {
			ArrayList list = new59();
			push(goTo(25), list, false);
		    }
		    break;
                    case 60: /* reduce AAlambda4Lambda */
		    {
			ArrayList list = new60();
			push(goTo(25), list, false);
		    }
		    break;
                    case 61: /* reduce AAlambdalistexpressions1LambdaListExpressions */
		    {
			ArrayList list = new61();
			push(goTo(26), list, false);
		    }
		    break;
                    case 62: /* reduce AAlambdalistexpressions2LambdaListExpressions */
		    {
			ArrayList list = new62();
			push(goTo(26), list, false);
		    }
		    break;
                    case 63: /* reduce ALambdaListExpressionsAuxiliar */
		    {
			ArrayList list = new63();
			push(goTo(27), list, false);
		    }
		    break;
                    case 64: /* reduce AAlistidentifiers1ListIdentifiers */
		    {
			ArrayList list = new64();
			push(goTo(28), list, false);
		    }
		    break;
                    case 65: /* reduce AAlistidentifiers2ListIdentifiers */
		    {
			ArrayList list = new65();
			push(goTo(28), list, false);
		    }
		    break;
                    case 66: /* reduce AListIdentifiersAux */
		    {
			ArrayList list = new66();
			push(goTo(29), list, false);
		    }
		    break;
                    case 67: /* reduce AIfStatement */
		    {
			ArrayList list = new67();
			push(goTo(30), list, false);
		    }
		    break;
                    case 68: /* reduce AIfStatementExpAux */
		    {
			ArrayList list = new68();
			push(goTo(31), list, false);
		    }
		    break;
                    case 69: /* reduce AIfStatementElseAux */
		    {
			ArrayList list = new69();
			push(goTo(32), list, false);
		    }
		    break;
                    case 70: /* reduce ATerminal$DecFunction */
		    {
			ArrayList list = new70();
			push(goTo(33), list, true);
		    }
		    break;
                    case 71: /* reduce ANonTerminal$DecFunction */
		    {
			ArrayList list = new71();
			push(goTo(33), list, true);
		    }
		    break;
                    case 72: /* reduce ATerminal$Parameters */
		    {
			ArrayList list = new72();
			push(goTo(34), list, true);
		    }
		    break;
                    case 73: /* reduce ANonTerminal$Parameters */
		    {
			ArrayList list = new73();
			push(goTo(34), list, true);
		    }
		    break;
                    case 74: /* reduce ATerminal$ParametersAuxiliar */
		    {
			ArrayList list = new74();
			push(goTo(35), list, true);
		    }
		    break;
                    case 75: /* reduce ANonTerminal$ParametersAuxiliar */
		    {
			ArrayList list = new75();
			push(goTo(35), list, true);
		    }
		    break;
                    case 76: /* reduce ATerminal$ParametersAssignAux */
		    {
			ArrayList list = new76();
			push(goTo(36), list, true);
		    }
		    break;
                    case 77: /* reduce ANonTerminal$ParametersAssignAux */
		    {
			ArrayList list = new77();
			push(goTo(36), list, true);
		    }
		    break;
                    case 78: /* reduce ATerminal$DeclarationConstant */
		    {
			ArrayList list = new78();
			push(goTo(37), list, true);
		    }
		    break;
                    case 79: /* reduce ANonTerminal$DeclarationConstant */
		    {
			ArrayList list = new79();
			push(goTo(37), list, true);
		    }
		    break;
                    case 80: /* reduce ATerminal$ListExpressionsAux */
		    {
			ArrayList list = new80();
			push(goTo(38), list, true);
		    }
		    break;
                    case 81: /* reduce ANonTerminal$ListExpressionsAux */
		    {
			ArrayList list = new81();
			push(goTo(38), list, true);
		    }
		    break;
                    case 82: /* reduce ATerminal$LambdaListExpressionsAuxiliar */
		    {
			ArrayList list = new82();
			push(goTo(39), list, true);
		    }
		    break;
                    case 83: /* reduce ANonTerminal$LambdaListExpressionsAuxiliar */
		    {
			ArrayList list = new83();
			push(goTo(39), list, true);
		    }
		    break;
                    case 84: /* reduce ATerminal$ListIdentifiersAux */
		    {
			ArrayList list = new84();
			push(goTo(40), list, true);
		    }
		    break;
                    case 85: /* reduce ANonTerminal$ListIdentifiersAux */
		    {
			ArrayList list = new85();
			push(goTo(40), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAdecfunction1DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDecFunction pdecfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TLeftParentheses tleftparenthesesNode3;
        TFunction tfunctionNode4;
        PType ptypeNode5;
        TIdentifier tidentifierNode6;
        PFunctionParamAuxiliar pfunctionparamauxiliarNode7;
        TColon tcolonNode8;
        PFunctionExpressionAuxiliar pfunctionexpressionauxiliarNode9;
        TRightParentheses trightparenthesesNode10;
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList1.get(0);
        tfunctionNode4 = (TFunction)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList4.get(0);
        pfunctionparamauxiliarNode7 = (PFunctionParamAuxiliar)nodeArrayList5.get(0);
        tcolonNode8 = (TColon)nodeArrayList6.get(0);
        pfunctionexpressionauxiliarNode9 = (PFunctionExpressionAuxiliar)nodeArrayList7.get(0);
        trightparenthesesNode10 = (TRightParentheses)nodeArrayList8.get(0);

        pdecfunctionNode1 = new ADecFunction(null, tleftparenthesesNode3, tfunctionNode4, ptypeNode5, tidentifierNode6, pfunctionparamauxiliarNode7, tcolonNode8, pfunctionexpressionauxiliarNode9, trightparenthesesNode10);
        }
	nodeList.add(pdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAdecfunction2DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDecFunction pdecfunctionNode1;
        {
            // Block
        TEntry tentryNode2;
        TLeftParentheses tleftparenthesesNode3;
        TFunction tfunctionNode4;
        PType ptypeNode5;
        TIdentifier tidentifierNode6;
        PFunctionParamAuxiliar pfunctionparamauxiliarNode7;
        TColon tcolonNode8;
        PFunctionExpressionAuxiliar pfunctionexpressionauxiliarNode9;
        TRightParentheses trightparenthesesNode10;
        tentryNode2 = (TEntry)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        tfunctionNode4 = (TFunction)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList5.get(0);
        pfunctionparamauxiliarNode7 = (PFunctionParamAuxiliar)nodeArrayList6.get(0);
        tcolonNode8 = (TColon)nodeArrayList7.get(0);
        pfunctionexpressionauxiliarNode9 = (PFunctionExpressionAuxiliar)nodeArrayList8.get(0);
        trightparenthesesNode10 = (TRightParentheses)nodeArrayList9.get(0);

        pdecfunctionNode1 = new ADecFunction(tentryNode2, tleftparenthesesNode3, tfunctionNode4, ptypeNode5, tidentifierNode6, pfunctionparamauxiliarNode7, tcolonNode8, pfunctionexpressionauxiliarNode9, trightparenthesesNode10);
        }
	nodeList.add(pdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAfunctionparamauxiliar1FunctionParamAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionParamAuxiliar pfunctionparamauxiliarNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        LinkedList listNode3 = new LinkedList();
        TRightParentheses trightparenthesesNode4;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        {
            // Block
        }
        trightparenthesesNode4 = (TRightParentheses)nodeArrayList2.get(0);

        pfunctionparamauxiliarNode1 = new AFunctionParamAuxiliar(tleftparenthesesNode2, listNode3, trightparenthesesNode4);
        }
	nodeList.add(pfunctionparamauxiliarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAfunctionparamauxiliar2FunctionParamAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionParamAuxiliar pfunctionparamauxiliarNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        LinkedList listNode4 = new LinkedList();
        TRightParentheses trightparenthesesNode5;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList3.get(0);

        pfunctionparamauxiliarNode1 = new AFunctionParamAuxiliar(tleftparenthesesNode2, listNode4, trightparenthesesNode5);
        }
	nodeList.add(pfunctionparamauxiliarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AFunctionExpressionAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionExpressionAuxiliar pfunctionexpressionauxiliarNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        PExpression pexpressionNode3;
        TRightParentheses trightparenthesesNode4;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparenthesesNode4 = (TRightParentheses)nodeArrayList3.get(0);

        pfunctionexpressionauxiliarNode1 = new AFunctionExpressionAuxiliar(tleftparenthesesNode2, pexpressionNode3, trightparenthesesNode4);
        }
	nodeList.add(pfunctionexpressionauxiliarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(trealNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAparameters1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList listNode3 = new LinkedList();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametersNode1 = new AParameters(pparameterNode2, listNode3);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAparameters2Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList listNode4 = new LinkedList();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametersNode1 = new AParameters(pparameterNode2, listNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AParametersAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParametersAuxiliar pparametersauxiliarNode1;
        {
            // Block
        TComma tcommaNode2;
        PParameter pparameterNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparameterNode3 = (PParameter)nodeArrayList2.get(0);

        pparametersauxiliarNode1 = new AParametersAuxiliar(tcommaNode2, pparameterNode3);
        }
	nodeList.add(pparametersauxiliarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ADecParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparameterNode1 = new ADecParameter(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAssignParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PAssign passignNode2;
        passignNode2 = (PAssign)nodeArrayList1.get(0);

        pparameterNode1 = new AAssignParameter(passignNode2);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssign passignNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLeftParentheses tleftparenthesesNode4;
        PParameterAssign pparameterassignNode5;
        TRightParentheses trightparenthesesNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenthesesNode4 = (TLeftParentheses)nodeArrayList3.get(0);
        pparameterassignNode5 = (PParameterAssign)nodeArrayList4.get(0);
        trightparenthesesNode6 = (TRightParentheses)nodeArrayList5.get(0);

        passignNode1 = new AAssign(ptypeNode2, tidentifierNode3, tleftparenthesesNode4, pparameterassignNode5, trightparenthesesNode6);
        }
	nodeList.add(passignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAparametersassign1ParametersAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParametersAssign pparametersassignNode1;
        {
            // Block
        PParameterAssign pparameterassignNode2;
        LinkedList listNode3 = new LinkedList();
        pparameterassignNode2 = (PParameterAssign)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametersassignNode1 = new AParametersAssign(pparameterassignNode2, listNode3);
        }
	nodeList.add(pparametersassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAparametersassign2ParametersAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParametersAssign pparametersassignNode1;
        {
            // Block
        PParameterAssign pparameterassignNode2;
        LinkedList listNode4 = new LinkedList();
        pparameterassignNode2 = (PParameterAssign)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametersassignNode1 = new AParametersAssign(pparameterassignNode2, listNode4);
        }
	nodeList.add(pparametersassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AParametersAssignAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParametersAssignAux pparametersassignauxNode1;
        {
            // Block
        TComma tcommaNode2;
        PParametersAssign pparametersassignNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparametersassignNode3 = (PParametersAssign)nodeArrayList2.get(0);

        pparametersassignauxNode1 = new AParametersAssignAux(tcommaNode2, pparametersassignNode3);
        }
	nodeList.add(pparametersassignauxNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ATypeParameterAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterAssign pparameterassignNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        pparameterassignNode1 = new ATypeParameterAssign(ptypeNode2);
        }
	nodeList.add(pparameterassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAssignParameterAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterAssign pparameterassignNode1;
        {
            // Block
        PAssign passignNode2;
        passignNode2 = (PAssign)nodeArrayList1.get(0);

        pparameterassignNode1 = new AAssignParameterAssign(passignNode2);
        }
	nodeList.add(pparameterassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AOpExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POp popNode2;
        popNode2 = (POp)nodeArrayList1.get(0);

        pexpressionNode1 = new AOpExpression(popNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AGtExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TBigger tbiggerNode3;
        POp popNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tbiggerNode3 = (TBigger)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpressionNode1 = new AGtExpression(pexpressionNode2, tbiggerNode3, popNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ALtExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TMinor tminorNode3;
        POp popNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminorNode3 = (TMinor)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpressionNode1 = new ALtExpression(pexpressionNode2, tminorNode3, popNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AEqualExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TEqual tequalNode3;
        POp popNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqualExpression(pexpressionNode2, tequalNode3, popNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ANegBoolExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TExclamation texclamationNode2;
        POp popNode3;
        texclamationNode2 = (TExclamation)nodeArrayList1.get(0);
        popNode3 = (POp)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegBoolExpression(texclamationNode2, popNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOr torNode3;
        POp popNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, torNode3, popNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TAnd tandNode3;
        POp popNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, tandNode3, popNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIfStatementExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PIfStatement pifstatementNode2;
        pifstatementNode2 = (PIfStatement)nodeArrayList1.get(0);

        pexpressionNode1 = new AIfStatementExpression(pifstatementNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ALambdaExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLambda plambdaNode2;
        plambdaNode2 = (PLambda)nodeArrayList1.get(0);

        pexpressionNode1 = new ALambdaExpression(plambdaNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AFactorOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        popNode1 = new AFactorOp(pfactorNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        POp popNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        popNode2 = (POp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        popNode1 = new APlusOp(popNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        POp popNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        popNode2 = (POp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        popNode1 = new AMinusOp(popNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TProduct tproductNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tproductNode3 = (TProduct)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AMultFactor(pfactorNode2, tproductNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDivide tdivideNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivideNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ANegFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PNegation pnegationNode2;
        pnegationNode2 = (PNegation)nodeArrayList1.get(0);

        pfactorNode1 = new ANegFactor(pnegationNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TModule tmoduleNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmoduleNode3 = (TModule)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tmoduleNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ALiteralTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        ptermNode1 = new ALiteralTerm(pliteralNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAexpressionterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        TRightParentheses trightparenthesesNode5;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList3.get(0);

        ptermNode1 = new AExpressionTerm(tleftparenthesesNode2, listNode3, pexpressionNode4, trightparenthesesNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAexpressionterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        LinkedList listNode4 = new LinkedList();
        PExpression pexpressionNode5;
        TRightParentheses trightparenthesesNode6;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trightparenthesesNode6 = (TRightParentheses)nodeArrayList4.get(0);

        ptermNode1 = new AExpressionTerm(tleftparenthesesNode2, listNode4, pexpressionNode5, trightparenthesesNode6);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ACallFunctionTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PCallFunction pcallfunctionNode2;
        pcallfunctionNode2 = (PCallFunction)nodeArrayList1.get(0);

        ptermNode1 = new ACallFunctionTerm(pcallfunctionNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ANegation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNegation pnegationNode1;
        {
            // Block
        TMinus tminusNode2;
        PTerm ptermNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        pnegationNode1 = new ANegation(tminusNode2, ptermNode3);
        }
	nodeList.add(pnegationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBooleanValue pbooleanvalueNode2;
        pbooleanvalueNode2 = (PBooleanValue)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(pbooleanvalueNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PNumeralFloat pnumeralfloatNode2;
        pnumeralfloatNode2 = (PNumeralFloat)nodeArrayList1.get(0);

        pliteralNode1 = new AFloatLiteral(pnumeralfloatNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PNumeralInt pnumeralintNode2;
        pnumeralintNode2 = (PNumeralInt)nodeArrayList1.get(0);

        pliteralNode1 = new AIntLiteral(pnumeralintNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ATrueBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBooleanValue pbooleanvalueNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanvalueNode1 = new ATrueBooleanValue(ttrueNode2);
        }
	nodeList.add(pbooleanvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AFalseBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBooleanValue pbooleanvalueNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanvalueNode1 = new AFalseBooleanValue(tfalseNode2);
        }
	nodeList.add(pbooleanvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AFloatNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeralFloat pnumeralfloatNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pnumeralfloatNode1 = new AFloatNumeralFloat(tfloatNode2);
        }
	nodeList.add(pnumeralfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ACientificNotationNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeralFloat pnumeralfloatNode1;
        {
            // Block
        TCientificNotation tcientificnotationNode2;
        tcientificnotationNode2 = (TCientificNotation)nodeArrayList1.get(0);

        pnumeralfloatNode1 = new ACientificNotationNumeralFloat(tcientificnotationNode2);
        }
	nodeList.add(pnumeralfloatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AIntDecimalNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeralInt pnumeralintNode1;
        {
            // Block
        TIntDecimal tintdecimalNode2;
        tintdecimalNode2 = (TIntDecimal)nodeArrayList1.get(0);

        pnumeralintNode1 = new AIntDecimalNumeralInt(tintdecimalNode2);
        }
	nodeList.add(pnumeralintNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AIntHexadecimalNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeralInt pnumeralintNode1;
        {
            // Block
        TIntHexadecimal tinthexadecimalNode2;
        tinthexadecimalNode2 = (TIntHexadecimal)nodeArrayList1.get(0);

        pnumeralintNode1 = new AIntHexadecimalNumeralInt(tinthexadecimalNode2);
        }
	nodeList.add(pnumeralintNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAcallfunctioncallfunction1CallFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCallFunction pcallfunctionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParentheses tleftparenthesesNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParentheses trightparenthesesNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList3.get(0);

        pcallfunctionNode1 = new ACallFunctionCallFunction(tidentifierNode2, tleftparenthesesNode3, null, trightparenthesesNode5);
        }
	nodeList.add(pcallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAcallfunctioncallfunction2CallFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCallFunction pcallfunctionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParentheses tleftparenthesesNode3;
        PListExpressions plistexpressionsNode4;
        TRightParentheses trightparenthesesNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        plistexpressionsNode4 = (PListExpressions)nodeArrayList3.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList4.get(0);

        pcallfunctionNode1 = new ACallFunctionCallFunction(tidentifierNode2, tleftparenthesesNode3, plistexpressionsNode4, trightparenthesesNode5);
        }
	nodeList.add(pcallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAlistexpressionslistexpressions1ListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListExpressions plistexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        plistexpressionsNode1 = new AListExpressionsListExpressions(pexpressionNode2, listNode3);
        }
	nodeList.add(plistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAlistexpressionslistexpressions2ListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListExpressions plistexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistexpressionsNode1 = new AListExpressionsListExpressions(pexpressionNode2, listNode4);
        }
	nodeList.add(plistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AListExpressionsAuxListExpressionsAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListExpressionsAux plistexpressionsauxNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        plistexpressionsauxNode1 = new AListExpressionsAuxListExpressionsAux(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(plistexpressionsauxNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ADeclarationConstantDeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarationConstant pdeclarationconstantNode1;
        {
            // Block
        TLeftParentheses tleftparenthesesNode2;
        TConstant tconstantNode3;
        PType ptypeNode4;
        TIdentifier tidentifierNode5;
        PExpression pexpressionNode6;
        TRightParentheses trightparenthesesNode7;
        tleftparenthesesNode2 = (TLeftParentheses)nodeArrayList1.get(0);
        tconstantNode3 = (TConstant)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);
        trightparenthesesNode7 = (TRightParentheses)nodeArrayList6.get(0);

        pdeclarationconstantNode1 = new ADeclarationConstantDeclarationConstant(tleftparenthesesNode2, tconstantNode3, ptypeNode4, tidentifierNode5, pexpressionNode6, trightparenthesesNode7);
        }
	nodeList.add(pdeclarationconstantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAlambda1Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambda plambdaNode1;
        {
            // Block
        TTkLambda ttklambdaNode2;
        TLeftParentheses tleftparenthesesNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParentheses trightparenthesesNode5;
        TColon tcolonNode6;
        PTerm ptermNode7;
        TLeftBracket tleftbracketNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRightBracket trightbracketNode10;
        ttklambdaNode2 = (TTkLambda)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        ptermNode7 = (PTerm)nodeArrayList5.get(0);
        tleftbracketNode8 = (TLeftBracket)nodeArrayList6.get(0);
        trightbracketNode10 = (TRightBracket)nodeArrayList7.get(0);

        plambdaNode1 = new ALambda(ttklambdaNode2, tleftparenthesesNode3, null, trightparenthesesNode5, tcolonNode6, ptermNode7, tleftbracketNode8, null, trightbracketNode10);
        }
	nodeList.add(plambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAlambda2Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambda plambdaNode1;
        {
            // Block
        TTkLambda ttklambdaNode2;
        TLeftParentheses tleftparenthesesNode3;
        PListIdentifiers plistidentifiersNode4;
        TRightParentheses trightparenthesesNode5;
        TColon tcolonNode6;
        PTerm ptermNode7;
        TLeftBracket tleftbracketNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TRightBracket trightbracketNode10;
        ttklambdaNode2 = (TTkLambda)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        plistidentifiersNode4 = (PListIdentifiers)nodeArrayList3.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);
        tleftbracketNode8 = (TLeftBracket)nodeArrayList7.get(0);
        trightbracketNode10 = (TRightBracket)nodeArrayList8.get(0);

        plambdaNode1 = new ALambda(ttklambdaNode2, tleftparenthesesNode3, plistidentifiersNode4, trightparenthesesNode5, tcolonNode6, ptermNode7, tleftbracketNode8, null, trightbracketNode10);
        }
	nodeList.add(plambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAlambda3Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambda plambdaNode1;
        {
            // Block
        TTkLambda ttklambdaNode2;
        TLeftParentheses tleftparenthesesNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParentheses trightparenthesesNode5;
        TColon tcolonNode6;
        PTerm ptermNode7;
        TLeftBracket tleftbracketNode8;
        PLambdaListExpressions plambdalistexpressionsNode9;
        TRightBracket trightbracketNode10;
        ttklambdaNode2 = (TTkLambda)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        ptermNode7 = (PTerm)nodeArrayList5.get(0);
        tleftbracketNode8 = (TLeftBracket)nodeArrayList6.get(0);
        plambdalistexpressionsNode9 = (PLambdaListExpressions)nodeArrayList7.get(0);
        trightbracketNode10 = (TRightBracket)nodeArrayList8.get(0);

        plambdaNode1 = new ALambda(ttklambdaNode2, tleftparenthesesNode3, null, trightparenthesesNode5, tcolonNode6, ptermNode7, tleftbracketNode8, plambdalistexpressionsNode9, trightbracketNode10);
        }
	nodeList.add(plambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAlambda4Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambda plambdaNode1;
        {
            // Block
        TTkLambda ttklambdaNode2;
        TLeftParentheses tleftparenthesesNode3;
        PListIdentifiers plistidentifiersNode4;
        TRightParentheses trightparenthesesNode5;
        TColon tcolonNode6;
        PTerm ptermNode7;
        TLeftBracket tleftbracketNode8;
        PLambdaListExpressions plambdalistexpressionsNode9;
        TRightBracket trightbracketNode10;
        ttklambdaNode2 = (TTkLambda)nodeArrayList1.get(0);
        tleftparenthesesNode3 = (TLeftParentheses)nodeArrayList2.get(0);
        plistidentifiersNode4 = (PListIdentifiers)nodeArrayList3.get(0);
        trightparenthesesNode5 = (TRightParentheses)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);
        tleftbracketNode8 = (TLeftBracket)nodeArrayList7.get(0);
        plambdalistexpressionsNode9 = (PLambdaListExpressions)nodeArrayList8.get(0);
        trightbracketNode10 = (TRightBracket)nodeArrayList9.get(0);

        plambdaNode1 = new ALambda(ttklambdaNode2, tleftparenthesesNode3, plistidentifiersNode4, trightparenthesesNode5, tcolonNode6, ptermNode7, tleftbracketNode8, plambdalistexpressionsNode9, trightbracketNode10);
        }
	nodeList.add(plambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAlambdalistexpressions1LambdaListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambdaListExpressions plambdalistexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        plambdalistexpressionsNode1 = new ALambdaListExpressions(pexpressionNode2, listNode3);
        }
	nodeList.add(plambdalistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAlambdalistexpressions2LambdaListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambdaListExpressions plambdalistexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plambdalistexpressionsNode1 = new ALambdaListExpressions(pexpressionNode2, listNode4);
        }
	nodeList.add(plambdalistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ALambdaListExpressionsAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLambdaListExpressionsAuxiliar plambdalistexpressionsauxiliarNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        plambdalistexpressionsauxiliarNode1 = new ALambdaListExpressionsAuxiliar(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(plambdalistexpressionsauxiliarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AAlistidentifiers1ListIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListIdentifiers plistidentifiersNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        plistidentifiersNode1 = new AListIdentifiers(tidentifierNode2, listNode3);
        }
	nodeList.add(plistidentifiersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AAlistidentifiers2ListIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListIdentifiers plistidentifiersNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistidentifiersNode1 = new AListIdentifiers(tidentifierNode2, listNode4);
        }
	nodeList.add(plistidentifiersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AListIdentifiersAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListIdentifiersAux plistidentifiersauxNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        plistidentifiersauxNode1 = new AListIdentifiersAux(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(plistidentifiersauxNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        PIfStatementExpAux pifstatementexpauxNode2;
        TThen tthenNode3;
        PTerm ptermNode4;
        PIfStatementElseAux pifstatementelseauxNode5;
        pifstatementexpauxNode2 = (PIfStatementExpAux)nodeArrayList1.get(0);
        tthenNode3 = (TThen)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);
        pifstatementelseauxNode5 = (PIfStatementElseAux)nodeArrayList4.get(0);

        pifstatementNode1 = new AIfStatement(pifstatementexpauxNode2, tthenNode3, ptermNode4, pifstatementelseauxNode5);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AIfStatementExpAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStatementExpAux pifstatementexpauxNode1;
        {
            // Block
        TIf tifNode2;
        PTerm ptermNode3;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        pifstatementexpauxNode1 = new AIfStatementExpAux(tifNode2, ptermNode3);
        }
	nodeList.add(pifstatementexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AIfStatementElseAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStatementElseAux pifstatementelseauxNode1;
        {
            // Block
        TElse telseNode2;
        PTerm ptermNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        pifstatementelseauxNode1 = new AIfStatementElseAux(telseNode2, ptermNode3);
        }
	nodeList.add(pifstatementelseauxNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATerminal$DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDecFunction pdecfunctionNode1;
        pdecfunctionNode1 = (PDecFunction)nodeArrayList1.get(0);
	if(pdecfunctionNode1 != null)
	{
	  listNode2.add(pdecfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ANonTerminal$DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDecFunction pdecfunctionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecfunctionNode2 = (PDecFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecfunctionNode2 != null)
	{
	  listNode3.add(pdecfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ATerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameters pparametersNode1;
        pparametersNode1 = (PParameters)nodeArrayList1.get(0);
	if(pparametersNode1 != null)
	{
	  listNode2.add(pparametersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ANonTerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParameters pparametersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametersNode2 = (PParameters)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametersNode2 != null)
	{
	  listNode3.add(pparametersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ATerminal$ParametersAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParametersAuxiliar pparametersauxiliarNode1;
        pparametersauxiliarNode1 = (PParametersAuxiliar)nodeArrayList1.get(0);
	if(pparametersauxiliarNode1 != null)
	{
	  listNode2.add(pparametersauxiliarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ANonTerminal$ParametersAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParametersAuxiliar pparametersauxiliarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametersauxiliarNode2 = (PParametersAuxiliar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametersauxiliarNode2 != null)
	{
	  listNode3.add(pparametersauxiliarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ATerminal$ParametersAssignAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParametersAssignAux pparametersassignauxNode1;
        pparametersassignauxNode1 = (PParametersAssignAux)nodeArrayList1.get(0);
	if(pparametersassignauxNode1 != null)
	{
	  listNode2.add(pparametersassignauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ANonTerminal$ParametersAssignAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParametersAssignAux pparametersassignauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametersassignauxNode2 = (PParametersAssignAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametersassignauxNode2 != null)
	{
	  listNode3.add(pparametersassignauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ATerminal$DeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDeclarationConstant pdeclarationconstantNode1;
        pdeclarationconstantNode1 = (PDeclarationConstant)nodeArrayList1.get(0);
	if(pdeclarationconstantNode1 != null)
	{
	  listNode2.add(pdeclarationconstantNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ANonTerminal$DeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDeclarationConstant pdeclarationconstantNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationconstantNode2 = (PDeclarationConstant)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationconstantNode2 != null)
	{
	  listNode3.add(pdeclarationconstantNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ATerminal$ListExpressionsAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PListExpressionsAux plistexpressionsauxNode1;
        plistexpressionsauxNode1 = (PListExpressionsAux)nodeArrayList1.get(0);
	if(plistexpressionsauxNode1 != null)
	{
	  listNode2.add(plistexpressionsauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ANonTerminal$ListExpressionsAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PListExpressionsAux plistexpressionsauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistexpressionsauxNode2 = (PListExpressionsAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistexpressionsauxNode2 != null)
	{
	  listNode3.add(plistexpressionsauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ATerminal$LambdaListExpressionsAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLambdaListExpressionsAuxiliar plambdalistexpressionsauxiliarNode1;
        plambdalistexpressionsauxiliarNode1 = (PLambdaListExpressionsAuxiliar)nodeArrayList1.get(0);
	if(plambdalistexpressionsauxiliarNode1 != null)
	{
	  listNode2.add(plambdalistexpressionsauxiliarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ANonTerminal$LambdaListExpressionsAuxiliar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLambdaListExpressionsAuxiliar plambdalistexpressionsauxiliarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plambdalistexpressionsauxiliarNode2 = (PLambdaListExpressionsAuxiliar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plambdalistexpressionsauxiliarNode2 != null)
	{
	  listNode3.add(plambdalistexpressionsauxiliarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ATerminal$ListIdentifiersAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PListIdentifiersAux plistidentifiersauxNode1;
        plistidentifiersauxNode1 = (PListIdentifiersAux)nodeArrayList1.get(0);
	if(plistidentifiersauxNode1 != null)
	{
	  listNode2.add(plistidentifiersauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ANonTerminal$ListIdentifiersAux */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PListIdentifiersAux plistidentifiersauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistidentifiersauxNode2 = (PListIdentifiersAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistidentifiersauxNode2 != null)
	{
	  listNode3.add(plistidentifiersauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {13, SHIFT, 1}, {14, SHIFT, 2}, },
			{{-1, ERROR, 1}, {14, SHIFT, 6}, },
			{{-1, ERROR, 2}, {3, SHIFT, 7}, },
			{{-1, ERROR, 3}, {36, ACCEPT, -1}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 0}, {13, SHIFT, 1}, {14, SHIFT, 2}, },
			{{-1, ERROR, 6}, {3, SHIFT, 9}, },
			{{-1, ERROR, 7}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 13}, {35, SHIFT, 15}, },
			{{-1, ERROR, 14}, {35, SHIFT, 16}, },
			{{-1, ERROR, 15}, {14, SHIFT, 17}, },
			{{-1, ERROR, 16}, {14, SHIFT, 17}, },
			{{-1, ERROR, 17}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {15, SHIFT, 20}, },
			{{-1, ERROR, 18}, {29, SHIFT, 26}, },
			{{-1, ERROR, 19}, {29, SHIFT, 27}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 21}, {35, SHIFT, 28}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 9}, {24, SHIFT, 29}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 25}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {15, SHIFT, 32}, },
			{{-1, ERROR, 26}, {14, SHIFT, 34}, },
			{{-1, ERROR, 27}, {14, SHIFT, 34}, },
			{{-1, REDUCE, 12}, {14, SHIFT, 37}, },
			{{-1, ERROR, 29}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 10}, {24, SHIFT, 29}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 34}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 35}, {15, SHIFT, 65}, },
			{{-1, ERROR, 36}, {15, SHIFT, 66}, },
			{{-1, ERROR, 37}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 42}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 43}, {14, SHIFT, 71}, },
			{{-1, ERROR, 44}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 45}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 46}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 51}, {14, SHIFT, 78}, },
			{{-1, ERROR, 52}, {11, SHIFT, 79}, {12, SHIFT, 80}, {15, SHIFT, 81}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 20}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 29}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 64}, {9, SHIFT, 90}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 18}, {35, SHIFT, 91}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 69}, {15, SHIFT, 92}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 71}, {15, SHIFT, 93}, {35, SHIFT, 94}, },
			{{-1, ERROR, 72}, {0, SHIFT, 40}, {1, SHIFT, 41}, {2, SHIFT, 96}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 73}, {11, SHIFT, 79}, {12, SHIFT, 80}, {15, SHIFT, 97}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 75}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 24}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, ERROR, 78}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {15, SHIFT, 100}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 79}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 80}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 82}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 83}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 84}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 85}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 86}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {18, SHIFT, 45}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 87}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 88}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 89}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 90}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 91}, {14, SHIFT, 37}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 93}, {29, SHIFT, 114}, },
			{{-1, REDUCE, 64}, {24, SHIFT, 115}, },
			{{-1, ERROR, 95}, {15, SHIFT, 118}, },
			{{-1, ERROR, 96}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 98}, {11, SHIFT, 79}, {12, SHIFT, 80}, {15, SHIFT, 120}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, {11, SHIFT, 79}, {12, SHIFT, 80}, {16, SHIFT, 82}, {24, SHIFT, 121}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, ERROR, 102}, {15, SHIFT, 124}, },
			{{-1, REDUCE, 26}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 25}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 23}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 22}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 21}, {17, SHIFT, 85}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 30}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 31}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 113}, {8, SHIFT, 125}, },
			{{-1, ERROR, 114}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 115}, {35, SHIFT, 128}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 65}, {24, SHIFT, 115}, },
			{{-1, ERROR, 118}, {29, SHIFT, 130}, },
			{{-1, ERROR, 119}, {35, SHIFT, 131}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 121}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 54}, {24, SHIFT, 121}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 125}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 127}, {27, SHIFT, 135}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 130}, {0, SHIFT, 40}, {1, SHIFT, 41}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 131}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 55}, {11, SHIFT, 79}, {12, SHIFT, 80}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 135}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {28, SHIFT, 138}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 136}, {27, SHIFT, 141}, },
			{{-1, ERROR, 137}, {11, SHIFT, 79}, {12, SHIFT, 80}, {15, SHIFT, 142}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 61}, {11, SHIFT, 79}, {12, SHIFT, 80}, {16, SHIFT, 82}, {24, SHIFT, 143}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, ERROR, 140}, {28, SHIFT, 146}, },
			{{-1, ERROR, 141}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {28, SHIFT, 147}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 143}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 62}, {24, SHIFT, 143}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 148}, {28, SHIFT, 151}, },
			{{-1, REDUCE, 63}, {11, SHIFT, 79}, {12, SHIFT, 80}, {16, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 60}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 8}, },
			{{-1, 18}, {16, 19}, },
			{{-1, 35}, {27, 36}, },
			{{-1, 21}, {7, 13}, {9, 14}, {37, 67}, {96, 119}, },
			{{-1, 22}, {25, 33}, },
			{{-1, 30}, {31, 39}, },
			{{-1, 23}, {29, 38}, },
			{{-1, 24}, {37, 68}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 69}, },
			{{-1, 73}, {34, 52}, {75, 98}, {78, 101}, {121, 132}, {131, 137}, {135, 139}, {141, 139}, {143, 149}, },
			{{-1, 53}, {46, 77}, {79, 103}, {80, 104}, {82, 105}, {83, 106}, {84, 107}, },
			{{-1, 54}, {85, 108}, {86, 109}, },
			{{-1, 55}, {42, 70}, {45, 76}, {87, 110}, {88, 111}, {89, 112}, {90, 113}, {114, 127}, {125, 134}, {130, 136}, },
			{{-1, 56}, },
			{{-1, 57}, },
			{{-1, 58}, },
			{{-1, 59}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 102}, },
			{{-1, 122}, {123, 133}, },
			{{-1, 74}, {75, 99}, },
			{{-1, 62}, },
			{{-1, 140}, {141, 148}, },
			{{-1, 144}, {145, 150}, },
			{{-1, 95}, },
			{{-1, 116}, {117, 129}, },
			{{-1, 63}, },
			{{-1, 64}, },
			{{-1, 126}, },
			{{-1, 5}, },
			{{-1, 25}, },
			{{-1, 31}, },
			{{-1, -1}, },
			{{-1, 75}, },
			{{-1, 123}, },
			{{-1, 145}, },
			{{-1, 117}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entry', '('",
			"expecting: '('",
			"expecting: 'function'",
			"expecting: EOF",
			"expecting: 'entry', '(', EOF",
			"expecting: 'int', 'bool', 'real'",
			"expecting: ')', identifier",
			"expecting: identifier",
			"expecting: 'int', 'bool', 'real', ')'",
			"expecting: ':'",
			"expecting: 'int', 'bool', 'real', ')', ','",
			"expecting: 'int', 'bool', 'real', '(', ')', ','",
			"expecting: 'true', 'false', 'if', 'lambda', '(', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: ')'",
			"expecting: 'else', 'then', 'and', 'or', ')', '=', '+', '-', '/', '*', '%', ',', '<', '>', '[', ']'",
			"expecting: 'true', 'false', '(', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'true', 'false', '(', '-', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'and', 'or', ')', '=', '<', '>'",
			"expecting: 'and', 'or', ')', '=', '+', '-', ',', '<', '>', ']'",
			"expecting: 'and', 'or', ')', '=', '+', '-', '/', '*', '%', ',', '<', '>', ']'",
			"expecting: 'and', 'or', ')', '=', ',', '<', '>', ']'",
			"expecting: 'then'",
			"expecting: 'true', 'false', 'const', 'if', 'lambda', '(', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'true', 'false', 'if', 'lambda', '(', ')', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: ')', ','",
			"expecting: 'and', 'or', ')', '=', ',', '<', '>'",
			"expecting: 'else'",
			"expecting: '['",
			"expecting: 'true', 'false', 'if', 'lambda', '(', '-', '!', ']', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'and', 'or', '=', ',', '<', '>', ']'",
			"expecting: ']'",
			"expecting: ',', ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 2, 5, 4, 5, 6, 6, 6, 7, 7, 1, 1, 8, 9, 9, 9, 7, 8, 10, 10, 8, 1, 1, 11, 5, 10, 10, 9, 8, 12, 13, 13, 5, 10, 10, 14, 14, 15, 1, 12, 15, 16, 14, 14, 14, 14, 1, 17, 18, 19, 19, 19, 14, 14, 14, 14, 14, 20, 20, 21, 4, 4, 6, 13, 13, 21, 6, 22, 17, 12, 12, 19, 18, 23, 16, 16, 13, 16, 16, 16, 16, 16, 15, 15, 15, 15, 1, 10, 9, 24, 13, 5, 14, 17, 12, 14, 25, 13, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 26, 15, 7, 24, 24, 9, 7, 14, 12, 24, 24, 14, 15, 20, 27, 24, 24, 15, 12, 25, 24, 20, 28, 27, 17, 20, 29, 30, 28, 12, 12, 31, 31, 20, 20, 30, 29, 31, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
