/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAfunctiondescription1FunctionDescription */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAfunctiondescription2FunctionDescription */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AAfunctionparameters1FunctionParameters */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AAfunctionparameters2FunctionParameters */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AFunctionExpression */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AIntType */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce ARealType */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce ABoolType */
		    {
			ArrayList list = new9();
			push(goTo(4), list);
		    }
		    break;
                    case 10: /* reduce AAparameters1Parameters */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AAparameters2Parameters */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AParametersSequence */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AAParameterParameter */
		    {
			ArrayList list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce AParameter */
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;
                    case 15: /* reduce AAassignfunction1AssignFunction */
		    {
			ArrayList list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce AAassignfunction2AssignFunction */
		    {
			ArrayList list = new16();
			push(goTo(8), list);
		    }
		    break;
                    case 17: /* reduce AAparametersassign1ParametersAssign */
		    {
			ArrayList list = new17();
			push(goTo(9), list);
		    }
		    break;
                    case 18: /* reduce AAparametersassign2ParametersAssign */
		    {
			ArrayList list = new18();
			push(goTo(9), list);
		    }
		    break;
                    case 19: /* reduce AParametersAssignSequence */
		    {
			ArrayList list = new19();
			push(goTo(10), list);
		    }
		    break;
                    case 20: /* reduce AVariableParameterAssign */
		    {
			ArrayList list = new20();
			push(goTo(11), list);
		    }
		    break;
                    case 21: /* reduce AParameterAssign */
		    {
			ArrayList list = new21();
			push(goTo(11), list);
		    }
		    break;
                    case 22: /* reduce AOperationExpression */
		    {
			ArrayList list = new22();
			push(goTo(12), list);
		    }
		    break;
                    case 23: /* reduce ANegativeNumberExpression */
		    {
			ArrayList list = new23();
			push(goTo(12), list);
		    }
		    break;
                    case 24: /* reduce ANegationExpression */
		    {
			ArrayList list = new24();
			push(goTo(12), list);
		    }
		    break;
                    case 25: /* reduce AIfThenElseStatementExpression */
		    {
			ArrayList list = new25();
			push(goTo(12), list);
		    }
		    break;
                    case 26: /* reduce AFactorOperation */
		    {
			ArrayList list = new26();
			push(goTo(13), list);
		    }
		    break;
                    case 27: /* reduce ABiggerOperation */
		    {
			ArrayList list = new27();
			push(goTo(13), list);
		    }
		    break;
                    case 28: /* reduce AMinorOperation */
		    {
			ArrayList list = new28();
			push(goTo(13), list);
		    }
		    break;
                    case 29: /* reduce AEqualOperation */
		    {
			ArrayList list = new29();
			push(goTo(13), list);
		    }
		    break;
                    case 30: /* reduce APlusOperation */
		    {
			ArrayList list = new30();
			push(goTo(13), list);
		    }
		    break;
                    case 31: /* reduce AMinusOperation */
		    {
			ArrayList list = new31();
			push(goTo(13), list);
		    }
		    break;
                    case 32: /* reduce AOrOperation */
		    {
			ArrayList list = new32();
			push(goTo(13), list);
		    }
		    break;
                    case 33: /* reduce AAndOperation */
		    {
			ArrayList list = new33();
			push(goTo(13), list);
		    }
		    break;
                    case 34: /* reduce ATermFactor */
		    {
			ArrayList list = new34();
			push(goTo(14), list);
		    }
		    break;
                    case 35: /* reduce AMultFactor */
		    {
			ArrayList list = new35();
			push(goTo(14), list);
		    }
		    break;
                    case 36: /* reduce ADivFactor */
		    {
			ArrayList list = new36();
			push(goTo(14), list);
		    }
		    break;
                    case 37: /* reduce AModFactor */
		    {
			ArrayList list = new37();
			push(goTo(14), list);
		    }
		    break;
                    case 38: /* reduce ALiteralTerm */
		    {
			ArrayList list = new38();
			push(goTo(15), list);
		    }
		    break;
                    case 39: /* reduce ABlockExpressionTerm */
		    {
			ArrayList list = new39();
			push(goTo(15), list);
		    }
		    break;
                    case 40: /* reduce ACallFunctionTerm */
		    {
			ArrayList list = new40();
			push(goTo(15), list);
		    }
		    break;
                    case 41: /* reduce ALambdaTerm */
		    {
			ArrayList list = new41();
			push(goTo(15), list);
		    }
		    break;
                    case 42: /* reduce ABooleanLiteral */
		    {
			ArrayList list = new42();
			push(goTo(16), list);
		    }
		    break;
                    case 43: /* reduce AFloatLiteral */
		    {
			ArrayList list = new43();
			push(goTo(16), list);
		    }
		    break;
                    case 44: /* reduce AIntLiteral */
		    {
			ArrayList list = new44();
			push(goTo(16), list);
		    }
		    break;
                    case 45: /* reduce AIdentifierLiteral */
		    {
			ArrayList list = new45();
			push(goTo(16), list);
		    }
		    break;
                    case 46: /* reduce ATrueBooleanValue */
		    {
			ArrayList list = new46();
			push(goTo(17), list);
		    }
		    break;
                    case 47: /* reduce AFalseBooleanValue */
		    {
			ArrayList list = new47();
			push(goTo(17), list);
		    }
		    break;
                    case 48: /* reduce AFloatNumeralFloat */
		    {
			ArrayList list = new48();
			push(goTo(18), list);
		    }
		    break;
                    case 49: /* reduce ACientificNotationNumeralFloat */
		    {
			ArrayList list = new49();
			push(goTo(18), list);
		    }
		    break;
                    case 50: /* reduce AIntDecimalNumeralInt */
		    {
			ArrayList list = new50();
			push(goTo(19), list);
		    }
		    break;
                    case 51: /* reduce AIntHexadecimalNumeralInt */
		    {
			ArrayList list = new51();
			push(goTo(19), list);
		    }
		    break;
                    case 52: /* reduce AAblockexpression1BlockExpression */
		    {
			ArrayList list = new52();
			push(goTo(20), list);
		    }
		    break;
                    case 53: /* reduce AAblockexpression2BlockExpression */
		    {
			ArrayList list = new53();
			push(goTo(20), list);
		    }
		    break;
                    case 54: /* reduce ADeclarationConstant */
		    {
			ArrayList list = new54();
			push(goTo(21), list);
		    }
		    break;
                    case 55: /* reduce AAcallfunction1CallFunction */
		    {
			ArrayList list = new55();
			push(goTo(22), list);
		    }
		    break;
                    case 56: /* reduce AAcallfunction2CallFunction */
		    {
			ArrayList list = new56();
			push(goTo(22), list);
		    }
		    break;
                    case 57: /* reduce AAlambda1Lambda */
		    {
			ArrayList list = new57();
			push(goTo(23), list);
		    }
		    break;
                    case 58: /* reduce AAlambda2Lambda */
		    {
			ArrayList list = new58();
			push(goTo(23), list);
		    }
		    break;
                    case 59: /* reduce AAlambda3Lambda */
		    {
			ArrayList list = new59();
			push(goTo(23), list);
		    }
		    break;
                    case 60: /* reduce AAlambda4Lambda */
		    {
			ArrayList list = new60();
			push(goTo(23), list);
		    }
		    break;
                    case 61: /* reduce AAlistidentifiers1ListIdentifiers */
		    {
			ArrayList list = new61();
			push(goTo(24), list);
		    }
		    break;
                    case 62: /* reduce AAlistidentifiers2ListIdentifiers */
		    {
			ArrayList list = new62();
			push(goTo(24), list);
		    }
		    break;
                    case 63: /* reduce AListIdentifiersSequence */
		    {
			ArrayList list = new63();
			push(goTo(25), list);
		    }
		    break;
                    case 64: /* reduce AAlistexpressions1ListExpressions */
		    {
			ArrayList list = new64();
			push(goTo(26), list);
		    }
		    break;
                    case 65: /* reduce AAlistexpressions2ListExpressions */
		    {
			ArrayList list = new65();
			push(goTo(26), list);
		    }
		    break;
                    case 66: /* reduce AListExpressionsSequence */
		    {
			ArrayList list = new66();
			push(goTo(27), list);
		    }
		    break;
                    case 67: /* reduce ATerminal$FunctionDescription */
		    {
			ArrayList list = new67();
			push(goTo(28), list);
		    }
		    break;
                    case 68: /* reduce ANonTerminal$FunctionDescription */
		    {
			ArrayList list = new68();
			push(goTo(28), list);
		    }
		    break;
                    case 69: /* reduce ATerminal$Parameters */
		    {
			ArrayList list = new69();
			push(goTo(29), list);
		    }
		    break;
                    case 70: /* reduce ANonTerminal$Parameters */
		    {
			ArrayList list = new70();
			push(goTo(29), list);
		    }
		    break;
                    case 71: /* reduce ATerminal$ParametersSequence */
		    {
			ArrayList list = new71();
			push(goTo(30), list);
		    }
		    break;
                    case 72: /* reduce ANonTerminal$ParametersSequence */
		    {
			ArrayList list = new72();
			push(goTo(30), list);
		    }
		    break;
                    case 73: /* reduce ATerminal$ParametersAssignSequence */
		    {
			ArrayList list = new73();
			push(goTo(31), list);
		    }
		    break;
                    case 74: /* reduce ANonTerminal$ParametersAssignSequence */
		    {
			ArrayList list = new74();
			push(goTo(31), list);
		    }
		    break;
                    case 75: /* reduce ATerminal$DeclarationConstant */
		    {
			ArrayList list = new75();
			push(goTo(32), list);
		    }
		    break;
                    case 76: /* reduce ANonTerminal$DeclarationConstant */
		    {
			ArrayList list = new76();
			push(goTo(32), list);
		    }
		    break;
                    case 77: /* reduce ATerminal$ListIdentifiersSequence */
		    {
			ArrayList list = new77();
			push(goTo(33), list);
		    }
		    break;
                    case 78: /* reduce ANonTerminal$ListIdentifiersSequence */
		    {
			ArrayList list = new78();
			push(goTo(33), list);
		    }
		    break;
                    case 79: /* reduce ATerminal$ListExpressionsSequence */
		    {
			ArrayList list = new79();
			push(goTo(34), list);
		    }
		    break;
                    case 80: /* reduce ANonTerminal$ListExpressionsSequence */
		    {
			ArrayList list = new80();
			push(goTo(34), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAProgram node1 = (PAProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PAProgram paprogramNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        paprogramNode1 = new AAProgram(listNode2);
        }
	nodeList.add(paprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAProgram paprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        paprogramNode1 = new AAProgram(listNode3);
        }
	nodeList.add(paprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfunctiondescription1FunctionDescription */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAFunctionDescription pafunctiondescriptionNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        PAFunctionParameters pafunctionparametersNode4;
        PAFunctionExpression pafunctionexpressionNode5;
        patypeNode2 = (PAType)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pafunctionparametersNode4 = (PAFunctionParameters)nodeArrayList5.get(0);
        pafunctionexpressionNode5 = (PAFunctionExpression)nodeArrayList7.get(0);

        pafunctiondescriptionNode1 = new AAFunctionDescription(patypeNode2, tidentifierNode3, pafunctionparametersNode4, pafunctionexpressionNode5);
        }
	nodeList.add(pafunctiondescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAfunctiondescription2FunctionDescription */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAFunctionDescription pafunctiondescriptionNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        PAFunctionParameters pafunctionparametersNode4;
        PAFunctionExpression pafunctionexpressionNode5;
        patypeNode2 = (PAType)nodeArrayList4.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        pafunctionparametersNode4 = (PAFunctionParameters)nodeArrayList6.get(0);
        pafunctionexpressionNode5 = (PAFunctionExpression)nodeArrayList8.get(0);

        pafunctiondescriptionNode1 = new AAFunctionDescription(patypeNode2, tidentifierNode3, pafunctionparametersNode4, pafunctionexpressionNode5);
        }
	nodeList.add(pafunctiondescriptionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAfunctionparameters1FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAFunctionParameters pafunctionparametersNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pafunctionparametersNode1 = new AAFunctionParameters(listNode2);
        }
	nodeList.add(pafunctionparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAfunctionparameters2FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAFunctionParameters pafunctionparametersNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pafunctionparametersNode1 = new AAFunctionParameters(listNode3);
        }
	nodeList.add(pafunctionparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AFunctionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAFunctionExpression pafunctionexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        paexpressionNode2 = (PAExpression)nodeArrayList2.get(0);

        pafunctionexpressionNode1 = new AAFunctionExpression(paexpressionNode2);
        }
	nodeList.add(pafunctionexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        patypeNode1 = new AAIntAType(tintNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        patypeNode1 = new AARealAType(trealNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        patypeNode1 = new AABoolAType(tboolNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAparameters1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameters paparametersNode1;
        {
            // Block
        PAParameter paparameterNode2;
        LinkedList listNode3 = new LinkedList();
        paparameterNode2 = (PAParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        paparametersNode1 = new AAParameters(paparameterNode2, listNode3);
        }
	nodeList.add(paparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAparameters2Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameters paparametersNode1;
        {
            // Block
        PAParameter paparameterNode2;
        LinkedList listNode4 = new LinkedList();
        paparameterNode2 = (PAParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paparametersNode1 = new AAParameters(paparameterNode2, listNode4);
        }
	nodeList.add(paparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AParametersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParametersSequence paparameterssequenceNode1;
        {
            // Block
        PAParameter paparameterNode2;
        paparameterNode2 = (PAParameter)nodeArrayList2.get(0);

        paparameterssequenceNode1 = new AAParametersSequence(paparameterNode2);
        }
	nodeList.add(paparameterssequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAParameterParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameter paparameterNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        paparameterNode1 = new AAVariableAParameter(patypeNode2, tidentifierNode3);
        }
	nodeList.add(paparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameter paparameterNode1;
        {
            // Block
        PAAssignFunction paassignfunctionNode2;
        paassignfunctionNode2 = (PAAssignFunction)nodeArrayList1.get(0);

        paparameterNode1 = new AAAssignFunctionAParameter(paassignfunctionNode2);
        }
	nodeList.add(paparameterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAassignfunction1AssignFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAAssignFunction paassignfunctionNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        paassignfunctionNode1 = new AAAssignFunction(patypeNode2, tidentifierNode3, null);
        }
	nodeList.add(paassignfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAassignfunction2AssignFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAAssignFunction paassignfunctionNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        PAParametersAssign paparametersassignNode4;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        paparametersassignNode4 = (PAParametersAssign)nodeArrayList4.get(0);

        paassignfunctionNode1 = new AAAssignFunction(patypeNode2, tidentifierNode3, paparametersassignNode4);
        }
	nodeList.add(paassignfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAparametersassign1ParametersAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParametersAssign paparametersassignNode1;
        {
            // Block
        PAParameterAssign paparameterassignNode2;
        LinkedList listNode3 = new LinkedList();
        paparameterassignNode2 = (PAParameterAssign)nodeArrayList1.get(0);
        {
            // Block
        }

        paparametersassignNode1 = new AAParametersAssign(paparameterassignNode2, listNode3);
        }
	nodeList.add(paparametersassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAparametersassign2ParametersAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParametersAssign paparametersassignNode1;
        {
            // Block
        PAParameterAssign paparameterassignNode2;
        LinkedList listNode4 = new LinkedList();
        paparameterassignNode2 = (PAParameterAssign)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paparametersassignNode1 = new AAParametersAssign(paparameterassignNode2, listNode4);
        }
	nodeList.add(paparametersassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AParametersAssignSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParametersAssignSequence paparametersassignsequenceNode1;
        {
            // Block
        PAParameterAssign paparameterassignNode2;
        paparameterassignNode2 = (PAParameterAssign)nodeArrayList2.get(0);

        paparametersassignsequenceNode1 = new AAParametersAssignSequence(paparameterassignNode2);
        }
	nodeList.add(paparametersassignsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AVariableParameterAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameterAssign paparameterassignNode1;
        {
            // Block
        PAType patypeNode2;
        patypeNode2 = (PAType)nodeArrayList1.get(0);

        paparameterassignNode1 = new AAVariableAParameterAssign(patypeNode2);
        }
	nodeList.add(paparameterassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AParameterAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAParameterAssign paparameterassignNode1;
        {
            // Block
        PAAssignFunction paassignfunctionNode2;
        paassignfunctionNode2 = (PAAssignFunction)nodeArrayList1.get(0);

        paparameterassignNode1 = new AAAssignFunctionAParameterAssign(paassignfunctionNode2);
        }
	nodeList.add(paparameterassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AOperationExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ANegativeNumberExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        paexpressionNode2 = (PAExpression)nodeArrayList2.get(0);

        paexpressionNode1 = new AANegativeNumberAExpression(paexpressionNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ANegationExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        paexpressionNode2 = (PAExpression)nodeArrayList2.get(0);

        paexpressionNode1 = new AANegationAExpression(paexpressionNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AIfThenElseStatementExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        PAExpression paexpressionNode4;
        paexpressionNode2 = (PAExpression)nodeArrayList3.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList6.get(0);
        paexpressionNode4 = (PAExpression)nodeArrayList8.get(0);

        paexpressionNode1 = new AAIfThenElseStatementAExpression(paexpressionNode2, paexpressionNode3, paexpressionNode4);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AFactorOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ABiggerOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AABiggerAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AMinorOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAMinorAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AEqualOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAEqualAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce APlusOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAPlusAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMinusOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAMinusAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AOrOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAOrAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAndOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAAndAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAMultAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AADivAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        PAExpression paexpressionNode3;
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList3.get(0);

        paexpressionNode1 = new AAModAExpression(paexpressionNode2, paexpressionNode3);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ALiteralTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ABlockExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PABlockExpression pablockexpressionNode2;
        pablockexpressionNode2 = (PABlockExpression)nodeArrayList1.get(0);

        paexpressionNode1 = new AABlockExpressionAExpression(pablockexpressionNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ACallFunctionTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PACallFunction pacallfunctionNode2;
        pacallfunctionNode2 = (PACallFunction)nodeArrayList1.get(0);

        paexpressionNode1 = new AACallFunctionAExpression(pacallfunctionNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ALambdaTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        PALambda palambdaNode2;
        palambdaNode2 = (PALambda)nodeArrayList1.get(0);

        paexpressionNode1 = new AALambdaAExpression(palambdaNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        paexpressionNode1 = (PAExpression)nodeArrayList1.get(0);
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AIdentifierLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        paexpressionNode1 = new AAIdentifierAExpression(tidentifierNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ATrueBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        paexpressionNode1 = new AATrueAExpression(ttrueNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AFalseBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        paexpressionNode1 = new AAFalseAExpression(tfalseNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AFloatNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        paexpressionNode1 = new AAFloatAExpression(tfloatNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ACientificNotationNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TCientificNotation tcientificnotationNode2;
        tcientificnotationNode2 = (TCientificNotation)nodeArrayList1.get(0);

        paexpressionNode1 = new AACientificNotationAExpression(tcientificnotationNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AIntDecimalNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TIntDecimal tintdecimalNode2;
        tintdecimalNode2 = (TIntDecimal)nodeArrayList1.get(0);

        paexpressionNode1 = new AAIntDecimalAExpression(tintdecimalNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AIntHexadecimalNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAExpression paexpressionNode1;
        {
            // Block
        TIntHexadecimal tinthexadecimalNode2;
        tinthexadecimalNode2 = (TIntHexadecimal)nodeArrayList1.get(0);

        paexpressionNode1 = new AAIntHexadecimalAExpression(tinthexadecimalNode2);
        }
	nodeList.add(paexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAblockexpression1BlockExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PABlockExpression pablockexpressionNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PAExpression paexpressionNode3;
        {
            // Block
        }
        paexpressionNode3 = (PAExpression)nodeArrayList2.get(0);

        pablockexpressionNode1 = new AABlockExpression(listNode2, paexpressionNode3);
        }
	nodeList.add(pablockexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAblockexpression2BlockExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PABlockExpression pablockexpressionNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PAExpression paexpressionNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        paexpressionNode4 = (PAExpression)nodeArrayList3.get(0);

        pablockexpressionNode1 = new AABlockExpression(listNode3, paexpressionNode4);
        }
	nodeList.add(pablockexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ADeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PADeclarationConstant padeclarationconstantNode1;
        {
            // Block
        PAType patypeNode2;
        TIdentifier tidentifierNode3;
        PAExpression paexpressionNode4;
        patypeNode2 = (PAType)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        paexpressionNode4 = (PAExpression)nodeArrayList5.get(0);

        padeclarationconstantNode1 = new AADeclarationConstant(patypeNode2, tidentifierNode3, paexpressionNode4);
        }
	nodeList.add(padeclarationconstantNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAcallfunction1CallFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PACallFunction pacallfunctionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pacallfunctionNode1 = new AACallFunction(tidentifierNode2, null);
        }
	nodeList.add(pacallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAcallfunction2CallFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PACallFunction pacallfunctionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PAListExpressions palistexpressionsNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        palistexpressionsNode3 = (PAListExpressions)nodeArrayList3.get(0);

        pacallfunctionNode1 = new AACallFunction(tidentifierNode2, palistexpressionsNode3);
        }
	nodeList.add(pacallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAlambda1Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAExpression paexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        paexpressionNode3 = (PAExpression)nodeArrayList5.get(0);

        palambdaNode1 = new AALambda(null, paexpressionNode3, null);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAlambda2Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        PAListIdentifiers palistidentifiersNode2;
        PAExpression paexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        palistidentifiersNode2 = (PAListIdentifiers)nodeArrayList3.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList6.get(0);

        palambdaNode1 = new AALambda(palistidentifiersNode2, paexpressionNode3, null);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAlambda3Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAExpression paexpressionNode3;
        PAListExpressions palistexpressionsNode4;
        paexpressionNode3 = (PAExpression)nodeArrayList5.get(0);
        palistexpressionsNode4 = (PAListExpressions)nodeArrayList7.get(0);

        palambdaNode1 = new AALambda(null, paexpressionNode3, palistexpressionsNode4);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAlambda4Lambda */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        PAListIdentifiers palistidentifiersNode2;
        PAExpression paexpressionNode3;
        PAListExpressions palistexpressionsNode4;
        palistidentifiersNode2 = (PAListIdentifiers)nodeArrayList3.get(0);
        paexpressionNode3 = (PAExpression)nodeArrayList6.get(0);
        palistexpressionsNode4 = (PAListExpressions)nodeArrayList8.get(0);

        palambdaNode1 = new AALambda(palistidentifiersNode2, paexpressionNode3, palistexpressionsNode4);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAlistidentifiers1ListIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListIdentifiers palistidentifiersNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        palistidentifiersNode1 = new AAListIdentifiers(tidentifierNode2, listNode3);
        }
	nodeList.add(palistidentifiersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAlistidentifiers2ListIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListIdentifiers palistidentifiersNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        palistidentifiersNode1 = new AAListIdentifiers(tidentifierNode2, listNode4);
        }
	nodeList.add(palistidentifiersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AListIdentifiersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListIdentifiersSequence palistidentifierssequenceNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        palistidentifierssequenceNode1 = new AAIdentifierAListIdentifiersSequence(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(palistidentifierssequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AAlistexpressions1ListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListExpressions palistexpressionsNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        palistexpressionsNode1 = new AAListExpressions(paexpressionNode2, listNode3);
        }
	nodeList.add(palistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AAlistexpressions2ListExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListExpressions palistexpressionsNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        paexpressionNode2 = (PAExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        palistexpressionsNode1 = new AAListExpressions(paexpressionNode2, listNode4);
        }
	nodeList.add(palistexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AListExpressionsSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAListExpressionsSequence palistexpressionssequenceNode1;
        {
            // Block
        PAExpression paexpressionNode2;
        paexpressionNode2 = (PAExpression)nodeArrayList2.get(0);

        palistexpressionssequenceNode1 = new AAListExpressionsSequence(paexpressionNode2);
        }
	nodeList.add(palistexpressionssequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ATerminal$FunctionDescription */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAFunctionDescription pafunctiondescriptionNode1;
        pafunctiondescriptionNode1 = (PAFunctionDescription)nodeArrayList1.get(0);
	if(pafunctiondescriptionNode1 != null)
	{
	  listNode2.add(pafunctiondescriptionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ANonTerminal$FunctionDescription */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAFunctionDescription pafunctiondescriptionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pafunctiondescriptionNode2 = (PAFunctionDescription)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pafunctiondescriptionNode2 != null)
	{
	  listNode3.add(pafunctiondescriptionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAParameters paparametersNode1;
        paparametersNode1 = (PAParameters)nodeArrayList1.get(0);
	if(paparametersNode1 != null)
	{
	  listNode2.add(paparametersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANonTerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAParameters paparametersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparametersNode2 = (PAParameters)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparametersNode2 != null)
	{
	  listNode3.add(paparametersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ATerminal$ParametersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAParametersSequence paparameterssequenceNode1;
        paparameterssequenceNode1 = (PAParametersSequence)nodeArrayList1.get(0);
	if(paparameterssequenceNode1 != null)
	{
	  listNode2.add(paparameterssequenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ANonTerminal$ParametersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAParametersSequence paparameterssequenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparameterssequenceNode2 = (PAParametersSequence)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparameterssequenceNode2 != null)
	{
	  listNode3.add(paparameterssequenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATerminal$ParametersAssignSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAParametersAssignSequence paparametersassignsequenceNode1;
        paparametersassignsequenceNode1 = (PAParametersAssignSequence)nodeArrayList1.get(0);
	if(paparametersassignsequenceNode1 != null)
	{
	  listNode2.add(paparametersassignsequenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ANonTerminal$ParametersAssignSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAParametersAssignSequence paparametersassignsequenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparametersassignsequenceNode2 = (PAParametersAssignSequence)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparametersassignsequenceNode2 != null)
	{
	  listNode3.add(paparametersassignsequenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ATerminal$DeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PADeclarationConstant padeclarationconstantNode1;
        padeclarationconstantNode1 = (PADeclarationConstant)nodeArrayList1.get(0);
	if(padeclarationconstantNode1 != null)
	{
	  listNode2.add(padeclarationconstantNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ANonTerminal$DeclarationConstant */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PADeclarationConstant padeclarationconstantNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padeclarationconstantNode2 = (PADeclarationConstant)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padeclarationconstantNode2 != null)
	{
	  listNode3.add(padeclarationconstantNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ATerminal$ListIdentifiersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAListIdentifiersSequence palistidentifierssequenceNode1;
        palistidentifierssequenceNode1 = (PAListIdentifiersSequence)nodeArrayList1.get(0);
	if(palistidentifierssequenceNode1 != null)
	{
	  listNode2.add(palistidentifierssequenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ANonTerminal$ListIdentifiersSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAListIdentifiersSequence palistidentifierssequenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        palistidentifierssequenceNode2 = (PAListIdentifiersSequence)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(palistidentifierssequenceNode2 != null)
	{
	  listNode3.add(palistidentifierssequenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ATerminal$ListExpressionsSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAListExpressionsSequence palistexpressionssequenceNode1;
        palistexpressionssequenceNode1 = (PAListExpressionsSequence)nodeArrayList1.get(0);
	if(palistexpressionssequenceNode1 != null)
	{
	  listNode2.add(palistexpressionssequenceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ANonTerminal$ListExpressionsSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAListExpressionsSequence palistexpressionssequenceNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        palistexpressionssequenceNode2 = (PAListExpressionsSequence)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(palistexpressionssequenceNode2 != null)
	{
	  listNode3.add(palistexpressionssequenceNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {13, SHIFT, 1}, {14, SHIFT, 2}, },
			{{-1, ERROR, 1}, {14, SHIFT, 6}, },
			{{-1, ERROR, 2}, {3, SHIFT, 7}, },
			{{-1, ERROR, 3}, {36, ACCEPT, -1}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 1}, {13, SHIFT, 1}, {14, SHIFT, 2}, },
			{{-1, ERROR, 6}, {3, SHIFT, 9}, },
			{{-1, ERROR, 7}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 13}, {35, SHIFT, 15}, },
			{{-1, ERROR, 14}, {35, SHIFT, 16}, },
			{{-1, ERROR, 15}, {14, SHIFT, 17}, },
			{{-1, ERROR, 16}, {14, SHIFT, 17}, },
			{{-1, ERROR, 17}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {15, SHIFT, 20}, },
			{{-1, ERROR, 18}, {29, SHIFT, 26}, },
			{{-1, ERROR, 19}, {29, SHIFT, 27}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 21}, {35, SHIFT, 28}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 10}, {24, SHIFT, 29}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 25}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {15, SHIFT, 32}, },
			{{-1, ERROR, 26}, {14, SHIFT, 34}, },
			{{-1, ERROR, 27}, {14, SHIFT, 34}, },
			{{-1, REDUCE, 13}, {14, SHIFT, 37}, },
			{{-1, ERROR, 29}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 11}, {24, SHIFT, 29}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 34}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 35}, {15, SHIFT, 63}, },
			{{-1, ERROR, 36}, {15, SHIFT, 64}, },
			{{-1, ERROR, 37}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {15, SHIFT, 65}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 42}, {14, SHIFT, 70}, },
			{{-1, ERROR, 43}, {14, SHIFT, 71}, },
			{{-1, ERROR, 44}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 45}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 46}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 45}, {14, SHIFT, 78}, },
			{{-1, ERROR, 52}, {15, SHIFT, 79}, },
			{{-1, REDUCE, 22}, {11, SHIFT, 80}, {12, SHIFT, 81}, {16, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {25, SHIFT, 85}, {26, SHIFT, 86}, },
			{{-1, REDUCE, 26}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 20}, {35, SHIFT, 90}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 68}, {15, SHIFT, 91}, },
			{{-1, REDUCE, 17}, {24, SHIFT, 92}, },
			{{-1, ERROR, 70}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 71}, {15, SHIFT, 96}, {35, SHIFT, 97}, },
			{{-1, ERROR, 72}, {0, SHIFT, 40}, {1, SHIFT, 41}, {2, SHIFT, 99}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 73}, {15, SHIFT, 100}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 75}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 72}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 23}, {11, SHIFT, 80}, {12, SHIFT, 81}, {16, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {25, SHIFT, 85}, {26, SHIFT, 86}, },
			{{-1, REDUCE, 24}, {11, SHIFT, 80}, {12, SHIFT, 81}, {16, SHIFT, 82}, {17, SHIFT, 83}, {18, SHIFT, 84}, {25, SHIFT, 85}, {26, SHIFT, 86}, },
			{{-1, ERROR, 78}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {15, SHIFT, 103}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 80}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 81}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 82}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 83}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 84}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 85}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 86}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 87}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 88}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 89}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 90}, {14, SHIFT, 37}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 92}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 18}, {24, SHIFT, 92}, },
			{{-1, ERROR, 95}, {15, SHIFT, 118}, },
			{{-1, ERROR, 96}, {29, SHIFT, 119}, },
			{{-1, REDUCE, 61}, {24, SHIFT, 120}, },
			{{-1, ERROR, 98}, {15, SHIFT, 123}, },
			{{-1, ERROR, 99}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 101}, {15, SHIFT, 125}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 64}, {24, SHIFT, 126}, },
			{{-1, ERROR, 105}, {15, SHIFT, 129}, },
			{{-1, REDUCE, 33}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 32}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 29}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 30}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 31}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 28}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 27}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 118}, {9, SHIFT, 130}, },
			{{-1, ERROR, 119}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 120}, {35, SHIFT, 132}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 62}, {24, SHIFT, 120}, },
			{{-1, ERROR, 123}, {29, SHIFT, 134}, },
			{{-1, ERROR, 124}, {35, SHIFT, 135}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 126}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 65}, {24, SHIFT, 126}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 130}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 131}, {27, SHIFT, 139}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 134}, {0, SHIFT, 40}, {1, SHIFT, 41}, {10, SHIFT, 43}, {14, SHIFT, 44}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 135}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 138}, {8, SHIFT, 142}, },
			{{-1, ERROR, 139}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {28, SHIFT, 143}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, ERROR, 140}, {27, SHIFT, 145}, },
			{{-1, ERROR, 141}, {15, SHIFT, 146}, },
			{{-1, ERROR, 142}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 144}, {28, SHIFT, 148}, },
			{{-1, ERROR, 145}, {0, SHIFT, 40}, {1, SHIFT, 41}, {7, SHIFT, 42}, {10, SHIFT, 43}, {14, SHIFT, 44}, {18, SHIFT, 45}, {22, SHIFT, 46}, {28, SHIFT, 149}, {31, SHIFT, 47}, {32, SHIFT, 48}, {33, SHIFT, 49}, {34, SHIFT, 50}, {35, SHIFT, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 150}, {28, SHIFT, 151}, },
			{{-1, REDUCE, 60}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 8}, },
			{{-1, 18}, {16, 19}, },
			{{-1, 35}, {27, 36}, },
			{{-1, 21}, {7, 13}, {9, 14}, {37, 66}, {92, 66}, {99, 124}, },
			{{-1, 22}, {25, 33}, },
			{{-1, 30}, {31, 39}, },
			{{-1, 23}, {29, 38}, },
			{{-1, 24}, {37, 67}, {92, 67}, },
			{{-1, 68}, },
			{{-1, 93}, {94, 117}, },
			{{-1, 69}, {92, 116}, },
			{{-1, 104}, {34, 52}, {44, 73}, {70, 95}, {72, 73}, {75, 101}, {126, 136}, {130, 138}, {135, 141}, {142, 147}, },
			{{-1, 53}, {45, 76}, {46, 77}, },
			{{-1, 54}, {80, 106}, {81, 107}, {82, 108}, {83, 109}, {84, 110}, {85, 111}, {86, 112}, },
			{{-1, 55}, {87, 113}, {88, 114}, {89, 115}, {119, 131}, {134, 140}, },
			{{-1, 56}, },
			{{-1, 57}, },
			{{-1, 58}, },
			{{-1, 59}, },
			{{-1, 60}, },
			{{-1, 74}, {75, 102}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 98}, },
			{{-1, 121}, {122, 133}, },
			{{-1, 105}, {139, 144}, {145, 150}, },
			{{-1, 127}, {128, 137}, },
			{{-1, 5}, },
			{{-1, 25}, },
			{{-1, 31}, },
			{{-1, 94}, },
			{{-1, 75}, },
			{{-1, 122}, },
			{{-1, 128}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entry', '(', EOF",
			"expecting: '('",
			"expecting: 'function'",
			"expecting: EOF",
			"expecting: 'int', 'bool', 'real'",
			"expecting: ')', ',', identifier",
			"expecting: identifier",
			"expecting: 'int', 'bool', 'real', ')'",
			"expecting: ':'",
			"expecting: 'int', 'bool', 'real', ')', ','",
			"expecting: 'int', 'bool', 'real', '(', ')', ','",
			"expecting: 'true', 'false', 'if', 'lambda', '(', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: ')'",
			"expecting: 'else', 'and', 'or', ')', '=', '+', '-', '/', '*', '%', ',', '<', '>', '[', ']'",
			"expecting: 'true', 'false', 'lambda', '(', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'else', 'and', 'or', '(', ')', '=', '+', '-', '/', '*', '%', ',', '<', '>', '[', ']'",
			"expecting: 'else', 'and', 'or', ')', '=', '+', '-', ',', '<', '>', ']'",
			"expecting: 'else', 'and', 'or', ')', '=', '+', '-', '/', '*', '%', ',', '<', '>', ']'",
			"expecting: ')', ','",
			"expecting: ')', identifier",
			"expecting: 'true', 'false', 'const', 'if', 'lambda', '(', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: 'true', 'false', 'if', 'lambda', '(', ')', '-', '!', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: ')', ',', ']'",
			"expecting: 'then'",
			"expecting: '['",
			"expecting: 'else'",
			"expecting: 'true', 'false', 'if', 'lambda', '(', '-', '!', ']', int hexadecimal, int decimal, float, cientific notation, identifier",
			"expecting: ']'",
			"expecting: 'else', ')', ',', ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 0, 2, 4, 0, 4, 5, 5, 5, 6, 6, 1, 1, 7, 8, 8, 8, 6, 7, 9, 9, 7, 1, 1, 10, 4, 9, 9, 8, 7, 11, 12, 12, 7, 9, 9, 13, 13, 1, 1, 11, 14, 14, 13, 13, 13, 13, 15, 12, 16, 17, 17, 13, 13, 13, 13, 13, 13, 13, 0, 0, 9, 5, 18, 12, 18, 11, 19, 20, 12, 11, 11, 16, 16, 21, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1, 9, 4, 18, 18, 12, 8, 18, 12, 4, 13, 12, 11, 13, 22, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 23, 14, 6, 18, 18, 8, 6, 13, 11, 22, 22, 13, 11, 24, 18, 18, 14, 11, 22, 22, 25, 26, 24, 12, 11, 13, 27, 26, 11, 28, 13, 13, 27, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
